
bin\Debug\BrugVoorbeeld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00002d88  00002e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d88  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800308  00800308  00002f44  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00002f44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000200  00000000  00000000  00002f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000003c1  00000000  00000000  00003147  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ada  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014a0  00000000  00000000  00005fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ee0  00000000  00000000  00007482  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00009364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  000096a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  00009b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_13>
      38:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_14>
      3c:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__vector_17>
      48:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_18>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__vector_20>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_35>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e8       	ldi	r30, 0x88	; 136
      fc:	fd e2       	ldi	r31, 0x2D	; 45
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 30       	cpi	r26, 0x0A	; 10
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <main>
     122:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__vector_35>:


volatile int warnLichtOn = 0;


ISR(TIMER3_OVF_vect) {
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	00 90 5b 00 	lds	r0, 0x005B
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
	TCNT3 = RESET_VALUE;
     14e:	e4 e9       	ldi	r30, 0x94	; 148
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	84 e2       	ldi	r24, 0x24	; 36
     154:	94 e6       	ldi	r25, 0x64	; 100
     156:	91 83       	std	Z+1, r25	; 0x01
     158:	80 83       	st	Z, r24
    if (warnLichtOn) {
     15a:	80 91 08 03 	lds	r24, 0x0308
     15e:	90 91 09 03 	lds	r25, 0x0309
     162:	00 97       	sbiw	r24, 0x00	; 0
     164:	41 f0       	breq	.+16     	; 0x176 <__vector_35+0x4c>
	PORT_led_waarschuwing ^= (1 << PIN_led_waarschuwing_L) | (1 << PIN_led_waarschuwing_R);
     166:	ab e0       	ldi	r26, 0x0B	; 11
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	eb e0       	ldi	r30, 0x0B	; 11
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	90 81       	ld	r25, Z
     170:	8c e0       	ldi	r24, 0x0C	; 12
     172:	89 27       	eor	r24, r25
     174:	8c 93       	st	X, r24
    }
}
     176:	cf 91       	pop	r28
     178:	df 91       	pop	r29
     17a:	ff 91       	pop	r31
     17c:	ef 91       	pop	r30
     17e:	bf 91       	pop	r27
     180:	af 91       	pop	r26
     182:	9f 91       	pop	r25
     184:	8f 91       	pop	r24
     186:	0f 90       	pop	r0
     188:	00 92 5b 00 	sts	0x005B, r0
     18c:	0f 90       	pop	r0
     18e:	0f be       	out	0x3f, r0	; 63
     190:	0f 90       	pop	r0
     192:	1f 90       	pop	r1
     194:	18 95       	reti

00000196 <init_waarschuwingslicht>:




void init_waarschuwingslicht(void){
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
	// Config pins as output
	DDR_led_waarschuwing |= (1<<PIN_led_waarschuwing_L) | (1 << PIN_led_waarschuwing_R);
     19e:	aa e0       	ldi	r26, 0x0A	; 10
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	ea e0       	ldi	r30, 0x0A	; 10
     1a4:	f1 e0       	ldi	r31, 0x01	; 1
     1a6:	80 81       	ld	r24, Z
     1a8:	8c 60       	ori	r24, 0x0C	; 12
     1aa:	8c 93       	st	X, r24

	// Use mode 0, clkdiv = 8
	TCCR3A = 0;
     1ac:	e0 e9       	ldi	r30, 0x90	; 144
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	10 82       	st	Z, r1
	TCCR3B = (1<<CS32) | (0<<CS31) | (0<<CS30);
     1b2:	e1 e9       	ldi	r30, 0x91	; 145
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	84 e0       	ldi	r24, 0x04	; 4
     1b8:	80 83       	st	Z, r24
	// Interrupts on OVF
	TIMSK3 = (1<<TOIE3);
     1ba:	e1 e7       	ldi	r30, 0x71	; 113
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	80 83       	st	Z, r24

	TCNT3 = RESET_VALUE;
     1c2:	e4 e9       	ldi	r30, 0x94	; 148
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	84 e2       	ldi	r24, 0x24	; 36
     1c8:	94 e6       	ldi	r25, 0x64	; 100
     1ca:	91 83       	std	Z+1, r25	; 0x01
     1cc:	80 83       	st	Z, r24

	sei();
     1ce:	78 94       	sei
}
     1d0:	cf 91       	pop	r28
     1d2:	df 91       	pop	r29
     1d4:	08 95       	ret

000001d6 <init_brug_functies>:

void init_brug_functies(void) {
     1d6:	df 93       	push	r29
     1d8:	cf 93       	push	r28
     1da:	0f 92       	push	r0
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
    //init timer waarschuwingslicht
    init_waarschuwingslicht();
     1e0:	0e 94 cb 00 	call	0x196	; 0x196 <init_waarschuwingslicht>
    //bootstoplicht poorten op output zetten
    DDR_stoplicht |= 0b11111111;
     1e4:	e7 e2       	ldi	r30, 0x27	; 39
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	e7 e2       	ldi	r30, 0x27	; 39
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	8f ef       	ldi	r24, 0xFF	; 255
     1f0:	80 83       	st	Z, r24
    DDR_geel_led |= 0b00000011;
     1f2:	aa e0       	ldi	r26, 0x0A	; 10
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	ea e0       	ldi	r30, 0x0A	; 10
     1f8:	f1 e0       	ldi	r31, 0x01	; 1
     1fa:	80 81       	ld	r24, Z
     1fc:	83 60       	ori	r24, 0x03	; 3
     1fe:	8c 93       	st	X, r24
   //status leds
    DDR_status |= 0b11100000;
     200:	a7 e0       	ldi	r26, 0x07	; 7
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	e7 e0       	ldi	r30, 0x07	; 7
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	80 81       	ld	r24, Z
     20a:	80 6e       	ori	r24, 0xE0	; 224
     20c:	8c 93       	st	X, r24
    //knop poorten op input
    DDR_switch &= 0b11111100;
     20e:	a7 e0       	ldi	r26, 0x07	; 7
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e7 e0       	ldi	r30, 0x07	; 7
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	80 81       	ld	r24, Z
     218:	8c 7f       	andi	r24, 0xFC	; 252
     21a:	8c 93       	st	X, r24
    DDR_knop &= 0b11100011;
     21c:	a7 e0       	ldi	r26, 0x07	; 7
     21e:	b1 e0       	ldi	r27, 0x01	; 1
     220:	e7 e0       	ldi	r30, 0x07	; 7
     222:	f1 e0       	ldi	r31, 0x01	; 1
     224:	80 81       	ld	r24, Z
     226:	83 7e       	andi	r24, 0xE3	; 227
     228:	8c 93       	st	X, r24
    DDR_interrupt_knop &= 0b11111101;
     22a:	aa e2       	ldi	r26, 0x2A	; 42
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	ea e2       	ldi	r30, 0x2A	; 42
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8d 7f       	andi	r24, 0xFD	; 253
     236:	8c 93       	st	X, r24
    //knop poorten pullup resistor aan
    PORT_switch |= 0b00000011;
     238:	a8 e0       	ldi	r26, 0x08	; 8
     23a:	b1 e0       	ldi	r27, 0x01	; 1
     23c:	e8 e0       	ldi	r30, 0x08	; 8
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	80 81       	ld	r24, Z
     242:	83 60       	ori	r24, 0x03	; 3
     244:	8c 93       	st	X, r24
    PORT_knop |= 0b00011100;
     246:	a8 e0       	ldi	r26, 0x08	; 8
     248:	b1 e0       	ldi	r27, 0x01	; 1
     24a:	e8 e0       	ldi	r30, 0x08	; 8
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	80 81       	ld	r24, Z
     250:	8c 61       	ori	r24, 0x1C	; 28
     252:	8c 93       	st	X, r24
    PORT_interrupt_knop |= 0b00000010;
     254:	ab e2       	ldi	r26, 0x2B	; 43
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	eb e2       	ldi	r30, 0x2B	; 43
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	82 60       	ori	r24, 0x02	; 2
     260:	8c 93       	st	X, r24
}
     262:	0f 90       	pop	r0
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret

0000026a <windmeter>:

int windmeter(void) {//return 0 geen wind, return 1, te veel wind
     26a:	df 93       	push	r29
     26c:	cf 93       	push	r28
     26e:	0f 92       	push	r0
     270:	0f 92       	push	r0
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
    int wind = 1; //moet 0 zijn voor debug 1
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	9a 83       	std	Y+2, r25	; 0x02
     27c:	89 83       	std	Y+1, r24	; 0x01
    return (wind); //1 niet te veel wind, 0 te veel wind
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	9a 81       	ldd	r25, Y+2	; 0x02
}
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	cf 91       	pop	r28
     288:	df 91       	pop	r29
     28a:	08 95       	ret

0000028c <brugdek>:

void brugdek(int open_sluit) {// 1 open, 0 sluit
     28c:	df 93       	push	r29
     28e:	cf 93       	push	r28
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	ea 97       	sbiw	r28, 0x3a	; 58
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	9a af       	std	Y+58, r25	; 0x3a
     2a2:	89 af       	std	Y+57, r24	; 0x39
    if (open_sluit) {
     2a4:	89 ad       	ldd	r24, Y+57	; 0x39
     2a6:	9a ad       	ldd	r25, Y+58	; 0x3a
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	09 f4       	brne	.+2      	; 0x2ae <brugdek+0x22>
     2ac:	0e c1       	rjmp	.+540    	; 0x4ca <brugdek+0x23e>
        h_bridge_set_percentage(-20);
     2ae:	8c ee       	ldi	r24, 0xEC	; 236
     2b0:	0e 94 61 05 	call	0xac2	; 0xac2 <h_bridge_set_percentage>
     2b4:	ff c0       	rjmp	.+510    	; 0x4b4 <brugdek+0x228>
        while ((PIN_switch & (1 << switch_open)) != 0) {
            if ((PIN_interrupt_knop & (1 << knop_aanuit)) == 0) {
     2b6:	e9 e2       	ldi	r30, 0x29	; 41
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	88 2f       	mov	r24, r24
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	82 70       	andi	r24, 0x02	; 2
     2c2:	90 70       	andi	r25, 0x00	; 0
     2c4:	00 97       	sbiw	r24, 0x00	; 0
     2c6:	09 f0       	breq	.+2      	; 0x2ca <brugdek+0x3e>
     2c8:	83 c0       	rjmp	.+262    	; 0x3d0 <brugdek+0x144>
                h_bridge_set_percentage(0);
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	0e 94 61 05 	call	0xac2	; 0xac2 <h_bridge_set_percentage>
     2d0:	72 c0       	rjmp	.+228    	; 0x3b6 <brugdek+0x12a>
                while ((PIN_interrupt_knop & (1 << knop_aanuit)) == 0) {
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	a0 e2       	ldi	r26, 0x20	; 32
     2d8:	b1 e4       	ldi	r27, 0x41	; 65
     2da:	8d ab       	std	Y+53, r24	; 0x35
     2dc:	9e ab       	std	Y+54, r25	; 0x36
     2de:	af ab       	std	Y+55, r26	; 0x37
     2e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2e2:	6d a9       	ldd	r22, Y+53	; 0x35
     2e4:	7e a9       	ldd	r23, Y+54	; 0x36
     2e6:	8f a9       	ldd	r24, Y+55	; 0x37
     2e8:	98 ad       	ldd	r25, Y+56	; 0x38
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	4a e7       	ldi	r20, 0x7A	; 122
     2f0:	55 e4       	ldi	r21, 0x45	; 69
     2f2:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	89 ab       	std	Y+49, r24	; 0x31
     2fc:	9a ab       	std	Y+50, r25	; 0x32
     2fe:	ab ab       	std	Y+51, r26	; 0x33
     300:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     302:	69 a9       	ldd	r22, Y+49	; 0x31
     304:	7a a9       	ldd	r23, Y+50	; 0x32
     306:	8b a9       	ldd	r24, Y+51	; 0x33
     308:	9c a9       	ldd	r25, Y+52	; 0x34
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e8       	ldi	r20, 0x80	; 128
     310:	5f e3       	ldi	r21, 0x3F	; 63
     312:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
     316:	88 23       	and	r24, r24
     318:	2c f4       	brge	.+10     	; 0x324 <brugdek+0x98>
		__ticks = 1;
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	98 ab       	std	Y+48, r25	; 0x30
     320:	8f a7       	std	Y+47, r24	; 0x2f
     322:	3f c0       	rjmp	.+126    	; 0x3a2 <brugdek+0x116>
	else if (__tmp > 65535)
     324:	69 a9       	ldd	r22, Y+49	; 0x31
     326:	7a a9       	ldd	r23, Y+50	; 0x32
     328:	8b a9       	ldd	r24, Y+51	; 0x33
     32a:	9c a9       	ldd	r25, Y+52	; 0x34
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	3f ef       	ldi	r19, 0xFF	; 255
     330:	4f e7       	ldi	r20, 0x7F	; 127
     332:	57 e4       	ldi	r21, 0x47	; 71
     334:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
     338:	18 16       	cp	r1, r24
     33a:	4c f5       	brge	.+82     	; 0x38e <brugdek+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     33c:	6d a9       	ldd	r22, Y+53	; 0x35
     33e:	7e a9       	ldd	r23, Y+54	; 0x36
     340:	8f a9       	ldd	r24, Y+55	; 0x37
     342:	98 ad       	ldd	r25, Y+56	; 0x38
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	40 e2       	ldi	r20, 0x20	; 32
     34a:	51 e4       	ldi	r21, 0x41	; 65
     34c:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	bc 01       	movw	r22, r24
     356:	cd 01       	movw	r24, r26
     358:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     35c:	dc 01       	movw	r26, r24
     35e:	cb 01       	movw	r24, r22
     360:	98 ab       	std	Y+48, r25	; 0x30
     362:	8f a7       	std	Y+47, r24	; 0x2f
     364:	0f c0       	rjmp	.+30     	; 0x384 <brugdek+0xf8>
     366:	80 e9       	ldi	r24, 0x90	; 144
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	9e a7       	std	Y+46, r25	; 0x2e
     36c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     36e:	8d a5       	ldd	r24, Y+45	; 0x2d
     370:	9e a5       	ldd	r25, Y+46	; 0x2e
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <brugdek+0xe6>
     376:	9e a7       	std	Y+46, r25	; 0x2e
     378:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     37a:	8f a5       	ldd	r24, Y+47	; 0x2f
     37c:	98 a9       	ldd	r25, Y+48	; 0x30
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	98 ab       	std	Y+48, r25	; 0x30
     382:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     384:	8f a5       	ldd	r24, Y+47	; 0x2f
     386:	98 a9       	ldd	r25, Y+48	; 0x30
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	69 f7       	brne	.-38     	; 0x366 <brugdek+0xda>
     38c:	14 c0       	rjmp	.+40     	; 0x3b6 <brugdek+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     38e:	69 a9       	ldd	r22, Y+49	; 0x31
     390:	7a a9       	ldd	r23, Y+50	; 0x32
     392:	8b a9       	ldd	r24, Y+51	; 0x33
     394:	9c a9       	ldd	r25, Y+52	; 0x34
     396:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	98 ab       	std	Y+48, r25	; 0x30
     3a0:	8f a7       	std	Y+47, r24	; 0x2f
     3a2:	8f a5       	ldd	r24, Y+47	; 0x2f
     3a4:	98 a9       	ldd	r25, Y+48	; 0x30
     3a6:	9c a7       	std	Y+44, r25	; 0x2c
     3a8:	8b a7       	std	Y+43, r24	; 0x2b
     3aa:	8b a5       	ldd	r24, Y+43	; 0x2b
     3ac:	9c a5       	ldd	r25, Y+44	; 0x2c
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <brugdek+0x122>
     3b2:	9c a7       	std	Y+44, r25	; 0x2c
     3b4:	8b a7       	std	Y+43, r24	; 0x2b
     3b6:	e9 e2       	ldi	r30, 0x29	; 41
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	82 70       	andi	r24, 0x02	; 2
     3c2:	90 70       	andi	r25, 0x00	; 0
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	09 f4       	brne	.+2      	; 0x3ca <brugdek+0x13e>
     3c8:	84 cf       	rjmp	.-248    	; 0x2d2 <brugdek+0x46>
                    _delay_ms(10);
                }
                h_bridge_set_percentage(-20);
     3ca:	8c ee       	ldi	r24, 0xEC	; 236
     3cc:	0e 94 61 05 	call	0xac2	; 0xac2 <h_bridge_set_percentage>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b1 e4       	ldi	r27, 0x41	; 65
     3d8:	8f a3       	std	Y+39, r24	; 0x27
     3da:	98 a7       	std	Y+40, r25	; 0x28
     3dc:	a9 a7       	std	Y+41, r26	; 0x29
     3de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3e0:	6f a1       	ldd	r22, Y+39	; 0x27
     3e2:	78 a5       	ldd	r23, Y+40	; 0x28
     3e4:	89 a5       	ldd	r24, Y+41	; 0x29
     3e6:	9a a5       	ldd	r25, Y+42	; 0x2a
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	4a e7       	ldi	r20, 0x7A	; 122
     3ee:	55 e4       	ldi	r21, 0x45	; 69
     3f0:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     3f4:	dc 01       	movw	r26, r24
     3f6:	cb 01       	movw	r24, r22
     3f8:	8b a3       	std	Y+35, r24	; 0x23
     3fa:	9c a3       	std	Y+36, r25	; 0x24
     3fc:	ad a3       	std	Y+37, r26	; 0x25
     3fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     400:	6b a1       	ldd	r22, Y+35	; 0x23
     402:	7c a1       	ldd	r23, Y+36	; 0x24
     404:	8d a1       	ldd	r24, Y+37	; 0x25
     406:	9e a1       	ldd	r25, Y+38	; 0x26
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e8       	ldi	r20, 0x80	; 128
     40e:	5f e3       	ldi	r21, 0x3F	; 63
     410:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
     414:	88 23       	and	r24, r24
     416:	2c f4       	brge	.+10     	; 0x422 <brugdek+0x196>
		__ticks = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a a3       	std	Y+34, r25	; 0x22
     41e:	89 a3       	std	Y+33, r24	; 0x21
     420:	3f c0       	rjmp	.+126    	; 0x4a0 <brugdek+0x214>
	else if (__tmp > 65535)
     422:	6b a1       	ldd	r22, Y+35	; 0x23
     424:	7c a1       	ldd	r23, Y+36	; 0x24
     426:	8d a1       	ldd	r24, Y+37	; 0x25
     428:	9e a1       	ldd	r25, Y+38	; 0x26
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	3f ef       	ldi	r19, 0xFF	; 255
     42e:	4f e7       	ldi	r20, 0x7F	; 127
     430:	57 e4       	ldi	r21, 0x47	; 71
     432:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
     436:	18 16       	cp	r1, r24
     438:	4c f5       	brge	.+82     	; 0x48c <brugdek+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     43a:	6f a1       	ldd	r22, Y+39	; 0x27
     43c:	78 a5       	ldd	r23, Y+40	; 0x28
     43e:	89 a5       	ldd	r24, Y+41	; 0x29
     440:	9a a5       	ldd	r25, Y+42	; 0x2a
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e2       	ldi	r20, 0x20	; 32
     448:	51 e4       	ldi	r21, 0x41	; 65
     44a:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     44e:	dc 01       	movw	r26, r24
     450:	cb 01       	movw	r24, r22
     452:	bc 01       	movw	r22, r24
     454:	cd 01       	movw	r24, r26
     456:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     45a:	dc 01       	movw	r26, r24
     45c:	cb 01       	movw	r24, r22
     45e:	9a a3       	std	Y+34, r25	; 0x22
     460:	89 a3       	std	Y+33, r24	; 0x21
     462:	0f c0       	rjmp	.+30     	; 0x482 <brugdek+0x1f6>
     464:	80 e9       	ldi	r24, 0x90	; 144
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	98 a3       	std	Y+32, r25	; 0x20
     46a:	8f 8f       	std	Y+31, r24	; 0x1f
     46c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     46e:	98 a1       	ldd	r25, Y+32	; 0x20
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <brugdek+0x1e4>
     474:	98 a3       	std	Y+32, r25	; 0x20
     476:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     478:	89 a1       	ldd	r24, Y+33	; 0x21
     47a:	9a a1       	ldd	r25, Y+34	; 0x22
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	9a a3       	std	Y+34, r25	; 0x22
     480:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     482:	89 a1       	ldd	r24, Y+33	; 0x21
     484:	9a a1       	ldd	r25, Y+34	; 0x22
     486:	00 97       	sbiw	r24, 0x00	; 0
     488:	69 f7       	brne	.-38     	; 0x464 <brugdek+0x1d8>
     48a:	14 c0       	rjmp	.+40     	; 0x4b4 <brugdek+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     48c:	6b a1       	ldd	r22, Y+35	; 0x23
     48e:	7c a1       	ldd	r23, Y+36	; 0x24
     490:	8d a1       	ldd	r24, Y+37	; 0x25
     492:	9e a1       	ldd	r25, Y+38	; 0x26
     494:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	9a a3       	std	Y+34, r25	; 0x22
     49e:	89 a3       	std	Y+33, r24	; 0x21
     4a0:	89 a1       	ldd	r24, Y+33	; 0x21
     4a2:	9a a1       	ldd	r25, Y+34	; 0x22
     4a4:	9e 8f       	std	Y+30, r25	; 0x1e
     4a6:	8d 8f       	std	Y+29, r24	; 0x1d
     4a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <brugdek+0x220>
     4b0:	9e 8f       	std	Y+30, r25	; 0x1e
     4b2:	8d 8f       	std	Y+29, r24	; 0x1d
}

void brugdek(int open_sluit) {// 1 open, 0 sluit
    if (open_sluit) {
        h_bridge_set_percentage(-20);
        while ((PIN_switch & (1 << switch_open)) != 0) {
     4b4:	e6 e0       	ldi	r30, 0x06	; 6
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	80 81       	ld	r24, Z
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	81 70       	andi	r24, 0x01	; 1
     4c0:	90 70       	andi	r25, 0x00	; 0
     4c2:	88 23       	and	r24, r24
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <brugdek+0x23c>
     4c6:	f7 ce       	rjmp	.-530    	; 0x2b6 <brugdek+0x2a>
     4c8:	0d c1       	rjmp	.+538    	; 0x6e4 <brugdek+0x458>
                h_bridge_set_percentage(-20);
            }
            _delay_ms(10);
        }
    } else {
        h_bridge_set_percentage(20);
     4ca:	84 e1       	ldi	r24, 0x14	; 20
     4cc:	0e 94 61 05 	call	0xac2	; 0xac2 <h_bridge_set_percentage>
     4d0:	ff c0       	rjmp	.+510    	; 0x6d0 <brugdek+0x444>
        while ((PIN_switch & (1 << switch_dicht)) != 0) {
            if ((PIN_interrupt_knop & (1 << knop_aanuit)) == 0) {
     4d2:	e9 e2       	ldi	r30, 0x29	; 41
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	88 2f       	mov	r24, r24
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	82 70       	andi	r24, 0x02	; 2
     4de:	90 70       	andi	r25, 0x00	; 0
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <brugdek+0x25a>
     4e4:	83 c0       	rjmp	.+262    	; 0x5ec <brugdek+0x360>
                h_bridge_set_percentage(0);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 61 05 	call	0xac2	; 0xac2 <h_bridge_set_percentage>
     4ec:	72 c0       	rjmp	.+228    	; 0x5d2 <brugdek+0x346>
                while ((PIN_interrupt_knop & (1 << knop_aanuit)) == 0) {
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	a0 e2       	ldi	r26, 0x20	; 32
     4f4:	b1 e4       	ldi	r27, 0x41	; 65
     4f6:	89 8f       	std	Y+25, r24	; 0x19
     4f8:	9a 8f       	std	Y+26, r25	; 0x1a
     4fa:	ab 8f       	std	Y+27, r26	; 0x1b
     4fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4fe:	69 8d       	ldd	r22, Y+25	; 0x19
     500:	7a 8d       	ldd	r23, Y+26	; 0x1a
     502:	8b 8d       	ldd	r24, Y+27	; 0x1b
     504:	9c 8d       	ldd	r25, Y+28	; 0x1c
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	4a e7       	ldi	r20, 0x7A	; 122
     50c:	55 e4       	ldi	r21, 0x45	; 69
     50e:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	8d 8b       	std	Y+21, r24	; 0x15
     518:	9e 8b       	std	Y+22, r25	; 0x16
     51a:	af 8b       	std	Y+23, r26	; 0x17
     51c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     51e:	6d 89       	ldd	r22, Y+21	; 0x15
     520:	7e 89       	ldd	r23, Y+22	; 0x16
     522:	8f 89       	ldd	r24, Y+23	; 0x17
     524:	98 8d       	ldd	r25, Y+24	; 0x18
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e8       	ldi	r20, 0x80	; 128
     52c:	5f e3       	ldi	r21, 0x3F	; 63
     52e:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
     532:	88 23       	and	r24, r24
     534:	2c f4       	brge	.+10     	; 0x540 <brugdek+0x2b4>
		__ticks = 1;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	9c 8b       	std	Y+20, r25	; 0x14
     53c:	8b 8b       	std	Y+19, r24	; 0x13
     53e:	3f c0       	rjmp	.+126    	; 0x5be <brugdek+0x332>
	else if (__tmp > 65535)
     540:	6d 89       	ldd	r22, Y+21	; 0x15
     542:	7e 89       	ldd	r23, Y+22	; 0x16
     544:	8f 89       	ldd	r24, Y+23	; 0x17
     546:	98 8d       	ldd	r25, Y+24	; 0x18
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	3f ef       	ldi	r19, 0xFF	; 255
     54c:	4f e7       	ldi	r20, 0x7F	; 127
     54e:	57 e4       	ldi	r21, 0x47	; 71
     550:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
     554:	18 16       	cp	r1, r24
     556:	4c f5       	brge	.+82     	; 0x5aa <brugdek+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     558:	69 8d       	ldd	r22, Y+25	; 0x19
     55a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     55c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     55e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	40 e2       	ldi	r20, 0x20	; 32
     566:	51 e4       	ldi	r21, 0x41	; 65
     568:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	bc 01       	movw	r22, r24
     572:	cd 01       	movw	r24, r26
     574:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	9c 8b       	std	Y+20, r25	; 0x14
     57e:	8b 8b       	std	Y+19, r24	; 0x13
     580:	0f c0       	rjmp	.+30     	; 0x5a0 <brugdek+0x314>
     582:	80 e9       	ldi	r24, 0x90	; 144
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	9a 8b       	std	Y+18, r25	; 0x12
     588:	89 8b       	std	Y+17, r24	; 0x11
     58a:	89 89       	ldd	r24, Y+17	; 0x11
     58c:	9a 89       	ldd	r25, Y+18	; 0x12
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <brugdek+0x302>
     592:	9a 8b       	std	Y+18, r25	; 0x12
     594:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     596:	8b 89       	ldd	r24, Y+19	; 0x13
     598:	9c 89       	ldd	r25, Y+20	; 0x14
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	9c 8b       	std	Y+20, r25	; 0x14
     59e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a0:	8b 89       	ldd	r24, Y+19	; 0x13
     5a2:	9c 89       	ldd	r25, Y+20	; 0x14
     5a4:	00 97       	sbiw	r24, 0x00	; 0
     5a6:	69 f7       	brne	.-38     	; 0x582 <brugdek+0x2f6>
     5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <brugdek+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5aa:	6d 89       	ldd	r22, Y+21	; 0x15
     5ac:	7e 89       	ldd	r23, Y+22	; 0x16
     5ae:	8f 89       	ldd	r24, Y+23	; 0x17
     5b0:	98 8d       	ldd	r25, Y+24	; 0x18
     5b2:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	9c 8b       	std	Y+20, r25	; 0x14
     5bc:	8b 8b       	std	Y+19, r24	; 0x13
     5be:	8b 89       	ldd	r24, Y+19	; 0x13
     5c0:	9c 89       	ldd	r25, Y+20	; 0x14
     5c2:	98 8b       	std	Y+16, r25	; 0x10
     5c4:	8f 87       	std	Y+15, r24	; 0x0f
     5c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     5c8:	98 89       	ldd	r25, Y+16	; 0x10
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <brugdek+0x33e>
     5ce:	98 8b       	std	Y+16, r25	; 0x10
     5d0:	8f 87       	std	Y+15, r24	; 0x0f
     5d2:	e9 e2       	ldi	r30, 0x29	; 41
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	88 2f       	mov	r24, r24
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	82 70       	andi	r24, 0x02	; 2
     5de:	90 70       	andi	r25, 0x00	; 0
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <brugdek+0x35a>
     5e4:	84 cf       	rjmp	.-248    	; 0x4ee <brugdek+0x262>
                    _delay_ms(10);
                }
                h_bridge_set_percentage(20);
     5e6:	84 e1       	ldi	r24, 0x14	; 20
     5e8:	0e 94 61 05 	call	0xac2	; 0xac2 <h_bridge_set_percentage>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	a0 e2       	ldi	r26, 0x20	; 32
     5f2:	b1 e4       	ldi	r27, 0x41	; 65
     5f4:	8b 87       	std	Y+11, r24	; 0x0b
     5f6:	9c 87       	std	Y+12, r25	; 0x0c
     5f8:	ad 87       	std	Y+13, r26	; 0x0d
     5fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fc:	6b 85       	ldd	r22, Y+11	; 0x0b
     5fe:	7c 85       	ldd	r23, Y+12	; 0x0c
     600:	8d 85       	ldd	r24, Y+13	; 0x0d
     602:	9e 85       	ldd	r25, Y+14	; 0x0e
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	4a e7       	ldi	r20, 0x7A	; 122
     60a:	55 e4       	ldi	r21, 0x45	; 69
     60c:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     610:	dc 01       	movw	r26, r24
     612:	cb 01       	movw	r24, r22
     614:	8f 83       	std	Y+7, r24	; 0x07
     616:	98 87       	std	Y+8, r25	; 0x08
     618:	a9 87       	std	Y+9, r26	; 0x09
     61a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     61c:	6f 81       	ldd	r22, Y+7	; 0x07
     61e:	78 85       	ldd	r23, Y+8	; 0x08
     620:	89 85       	ldd	r24, Y+9	; 0x09
     622:	9a 85       	ldd	r25, Y+10	; 0x0a
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e8       	ldi	r20, 0x80	; 128
     62a:	5f e3       	ldi	r21, 0x3F	; 63
     62c:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
     630:	88 23       	and	r24, r24
     632:	2c f4       	brge	.+10     	; 0x63e <brugdek+0x3b2>
		__ticks = 1;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	9e 83       	std	Y+6, r25	; 0x06
     63a:	8d 83       	std	Y+5, r24	; 0x05
     63c:	3f c0       	rjmp	.+126    	; 0x6bc <brugdek+0x430>
	else if (__tmp > 65535)
     63e:	6f 81       	ldd	r22, Y+7	; 0x07
     640:	78 85       	ldd	r23, Y+8	; 0x08
     642:	89 85       	ldd	r24, Y+9	; 0x09
     644:	9a 85       	ldd	r25, Y+10	; 0x0a
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	3f ef       	ldi	r19, 0xFF	; 255
     64a:	4f e7       	ldi	r20, 0x7F	; 127
     64c:	57 e4       	ldi	r21, 0x47	; 71
     64e:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
     652:	18 16       	cp	r1, r24
     654:	4c f5       	brge	.+82     	; 0x6a8 <brugdek+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     656:	6b 85       	ldd	r22, Y+11	; 0x0b
     658:	7c 85       	ldd	r23, Y+12	; 0x0c
     65a:	8d 85       	ldd	r24, Y+13	; 0x0d
     65c:	9e 85       	ldd	r25, Y+14	; 0x0e
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	51 e4       	ldi	r21, 0x41	; 65
     666:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	9e 83       	std	Y+6, r25	; 0x06
     67c:	8d 83       	std	Y+5, r24	; 0x05
     67e:	0f c0       	rjmp	.+30     	; 0x69e <brugdek+0x412>
     680:	80 e9       	ldi	r24, 0x90	; 144
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	9c 83       	std	Y+4, r25	; 0x04
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <brugdek+0x400>
     690:	9c 83       	std	Y+4, r25	; 0x04
     692:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     694:	8d 81       	ldd	r24, Y+5	; 0x05
     696:	9e 81       	ldd	r25, Y+6	; 0x06
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	9e 83       	std	Y+6, r25	; 0x06
     69c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     69e:	8d 81       	ldd	r24, Y+5	; 0x05
     6a0:	9e 81       	ldd	r25, Y+6	; 0x06
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	69 f7       	brne	.-38     	; 0x680 <brugdek+0x3f4>
     6a6:	14 c0       	rjmp	.+40     	; 0x6d0 <brugdek+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6a8:	6f 81       	ldd	r22, Y+7	; 0x07
     6aa:	78 85       	ldd	r23, Y+8	; 0x08
     6ac:	89 85       	ldd	r24, Y+9	; 0x09
     6ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	9e 83       	std	Y+6, r25	; 0x06
     6ba:	8d 83       	std	Y+5, r24	; 0x05
     6bc:	8d 81       	ldd	r24, Y+5	; 0x05
     6be:	9e 81       	ldd	r25, Y+6	; 0x06
     6c0:	9a 83       	std	Y+2, r25	; 0x02
     6c2:	89 83       	std	Y+1, r24	; 0x01
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <brugdek+0x43c>
     6cc:	9a 83       	std	Y+2, r25	; 0x02
     6ce:	89 83       	std	Y+1, r24	; 0x01
            }
            _delay_ms(10);
        }
    } else {
        h_bridge_set_percentage(20);
        while ((PIN_switch & (1 << switch_dicht)) != 0) {
     6d0:	e6 e0       	ldi	r30, 0x06	; 6
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	80 81       	ld	r24, Z
     6d6:	88 2f       	mov	r24, r24
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	82 70       	andi	r24, 0x02	; 2
     6dc:	90 70       	andi	r25, 0x00	; 0
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <brugdek+0x458>
     6e2:	f7 ce       	rjmp	.-530    	; 0x4d2 <brugdek+0x246>
                h_bridge_set_percentage(20);
            }
            _delay_ms(10);
        }
    }
    h_bridge_set_percentage(0);
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	0e 94 61 05 	call	0xac2	; 0xac2 <h_bridge_set_percentage>
}
     6ea:	ea 96       	adiw	r28, 0x3a	; 58
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	cf 91       	pop	r28
     6f8:	df 91       	pop	r29
     6fa:	08 95       	ret

000006fc <statusled>:

void statusled(int status) {
     6fc:	df 93       	push	r29
     6fe:	cf 93       	push	r28
     700:	00 d0       	rcall	.+0      	; 0x702 <statusled+0x6>
     702:	0f 92       	push	r0
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	9a 83       	std	Y+2, r25	; 0x02
     70a:	89 83       	std	Y+1, r24	; 0x01
    PORT_status &= 0b00011111;
     70c:	a8 e0       	ldi	r26, 0x08	; 8
     70e:	b1 e0       	ldi	r27, 0x01	; 1
     710:	e8 e0       	ldi	r30, 0x08	; 8
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	80 81       	ld	r24, Z
     716:	8f 71       	andi	r24, 0x1F	; 31
     718:	8c 93       	st	X, r24
    switch (status) {
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
     71e:	9c 83       	std	Y+4, r25	; 0x04
     720:	8b 83       	std	Y+3, r24	; 0x03
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	9c 81       	ldd	r25, Y+4	; 0x04
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	91 05       	cpc	r25, r1
     72a:	89 f0       	breq	.+34     	; 0x74e <statusled+0x52>
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	91 05       	cpc	r25, r1
     734:	a1 f0       	breq	.+40     	; 0x75e <statusled+0x62>
     736:	8b 81       	ldd	r24, Y+3	; 0x03
     738:	9c 81       	ldd	r25, Y+4	; 0x04
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	b9 f4       	brne	.+46     	; 0x76c <statusled+0x70>
        case 0 : //dicht
            PORT_status |= (1 << PIN_led_dicht);
     73e:	a8 e0       	ldi	r26, 0x08	; 8
     740:	b1 e0       	ldi	r27, 0x01	; 1
     742:	e8 e0       	ldi	r30, 0x08	; 8
     744:	f1 e0       	ldi	r31, 0x01	; 1
     746:	80 81       	ld	r24, Z
     748:	80 68       	ori	r24, 0x80	; 128
     74a:	8c 93       	st	X, r24
     74c:	0f c0       	rjmp	.+30     	; 0x76c <statusled+0x70>
            break;
        case 1 : //bezig
            PORT_status |= (1 << PIN_led_bezig);
     74e:	a8 e0       	ldi	r26, 0x08	; 8
     750:	b1 e0       	ldi	r27, 0x01	; 1
     752:	e8 e0       	ldi	r30, 0x08	; 8
     754:	f1 e0       	ldi	r31, 0x01	; 1
     756:	80 81       	ld	r24, Z
     758:	80 64       	ori	r24, 0x40	; 64
     75a:	8c 93       	st	X, r24
     75c:	07 c0       	rjmp	.+14     	; 0x76c <statusled+0x70>
            break;
        case 2 : //open
            PORT_status |= (1 << PIN_led_open);
     75e:	a8 e0       	ldi	r26, 0x08	; 8
     760:	b1 e0       	ldi	r27, 0x01	; 1
     762:	e8 e0       	ldi	r30, 0x08	; 8
     764:	f1 e0       	ldi	r31, 0x01	; 1
     766:	80 81       	ld	r24, Z
     768:	80 62       	ori	r24, 0x20	; 32
     76a:	8c 93       	st	X, r24

    }

}
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	cf 91       	pop	r28
     776:	df 91       	pop	r29
     778:	08 95       	ret

0000077a <bel>:

void bel(int aan_uit) {// 1 aan, 0 uit
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	0f 92       	push	r0
     780:	0f 92       	push	r0
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	89 83       	std	Y+1, r24	; 0x01

}
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	08 95       	ret

00000794 <warnlicht>:

void warnlicht(int aan_uit) {// 1 aan, 0 uit
     794:	df 93       	push	r29
     796:	cf 93       	push	r28
     798:	0f 92       	push	r0
     79a:	0f 92       	push	r0
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	9a 83       	std	Y+2, r25	; 0x02
     7a2:	89 83       	std	Y+1, r24	; 0x01
    if (aan_uit) {
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	71 f0       	breq	.+28     	; 0x7c8 <warnlicht+0x34>
        warnLichtOn = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	90 93 09 03 	sts	0x0309, r25
     7b4:	80 93 08 03 	sts	0x0308, r24
        PORT_led_waarschuwing |= (1 << PIN_led_waarschuwing_L);
     7b8:	ab e0       	ldi	r26, 0x0B	; 11
     7ba:	b1 e0       	ldi	r27, 0x01	; 1
     7bc:	eb e0       	ldi	r30, 0x0B	; 11
     7be:	f1 e0       	ldi	r31, 0x01	; 1
     7c0:	80 81       	ld	r24, Z
     7c2:	84 60       	ori	r24, 0x04	; 4
     7c4:	8c 93       	st	X, r24
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <warnlicht+0x4a>
    } else {
        warnLichtOn = 0;
     7c8:	10 92 09 03 	sts	0x0309, r1
     7cc:	10 92 08 03 	sts	0x0308, r1
        PORT_led_waarschuwing &= 0b11110011;
     7d0:	ab e0       	ldi	r26, 0x0B	; 11
     7d2:	b1 e0       	ldi	r27, 0x01	; 1
     7d4:	eb e0       	ldi	r30, 0x0B	; 11
     7d6:	f1 e0       	ldi	r31, 0x01	; 1
     7d8:	80 81       	ld	r24, Z
     7da:	83 7f       	andi	r24, 0xF3	; 243
     7dc:	8c 93       	st	X, r24
    }
}
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	cf 91       	pop	r28
     7e4:	df 91       	pop	r29
     7e6:	08 95       	ret

000007e8 <stoplicht_boot>:

void stoplicht_boot(int status) {// 1 aan, 0 uit
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <stoplicht_boot+0x6>
     7ee:	0f 92       	push	r0
     7f0:	0f 92       	push	r0
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	9a 83       	std	Y+2, r25	; 0x02
     7f8:	89 83       	std	Y+1, r24	; 0x01
    PORT_led_stoplicht &= 0b00000000;
     7fa:	e8 e2       	ldi	r30, 0x28	; 40
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	10 82       	st	Z, r1
    PORT_geel_led &= 0b11111100;
     806:	ab e0       	ldi	r26, 0x0B	; 11
     808:	b1 e0       	ldi	r27, 0x01	; 1
     80a:	eb e0       	ldi	r30, 0x0B	; 11
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	80 81       	ld	r24, Z
     810:	8c 7f       	andi	r24, 0xFC	; 252
     812:	8c 93       	st	X, r24

    switch(status) {
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	9d 83       	std	Y+5, r25	; 0x05
     81a:	8c 83       	std	Y+4, r24	; 0x04
     81c:	8c 81       	ldd	r24, Y+4	; 0x04
     81e:	9d 81       	ldd	r25, Y+5	; 0x05
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	91 05       	cpc	r25, r1
     824:	e9 f0       	breq	.+58     	; 0x860 <stoplicht_boot+0x78>
     826:	8c 81       	ldd	r24, Y+4	; 0x04
     828:	9d 81       	ldd	r25, Y+5	; 0x05
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	91 05       	cpc	r25, r1
     82e:	2c f4       	brge	.+10     	; 0x83a <stoplicht_boot+0x52>
     830:	8c 81       	ldd	r24, Y+4	; 0x04
     832:	9d 81       	ldd	r25, Y+5	; 0x05
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	61 f0       	breq	.+24     	; 0x850 <stoplicht_boot+0x68>
     838:	31 c0       	rjmp	.+98     	; 0x89c <stoplicht_boot+0xb4>
     83a:	8c 81       	ldd	r24, Y+4	; 0x04
     83c:	9d 81       	ldd	r25, Y+5	; 0x05
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	91 05       	cpc	r25, r1
     842:	b1 f0       	breq	.+44     	; 0x870 <stoplicht_boot+0x88>
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
     848:	83 30       	cpi	r24, 0x03	; 3
     84a:	91 05       	cpc	r25, r1
     84c:	c9 f0       	breq	.+50     	; 0x880 <stoplicht_boot+0x98>
     84e:	26 c0       	rjmp	.+76     	; 0x89c <stoplicht_boot+0xb4>
        case 0 : //niemand doorlaten
            PORT_led_stoplicht |= (1 << PIN_rood_boven_L) | (1 << PIN_rood_boven_R) | (1 << PIN_rood_onder_L) | (1 << PIN_rood_onder_R);
     850:	a8 e2       	ldi	r26, 0x28	; 40
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	e8 e2       	ldi	r30, 0x28	; 40
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	80 6f       	ori	r24, 0xF0	; 240
     85c:	8c 93       	st	X, r24
     85e:	1e c0       	rjmp	.+60     	; 0x89c <stoplicht_boot+0xb4>
            break;
        case 1 : //brug gaat open of dicht
            PORT_led_stoplicht |= (1 << PIN_rood_boven_L) | (1 << PIN_rood_boven_R) | (1 << PIN_rood_onder_L) | (1 << PIN_rood_onder_R) | (1 << PIN_groen_onder_L) | (1 << PIN_groen_onder_R);
     860:	a8 e2       	ldi	r26, 0x28	; 40
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e8 e2       	ldi	r30, 0x28	; 40
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	8c 6f       	ori	r24, 0xFC	; 252
     86c:	8c 93       	st	X, r24
     86e:	16 c0       	rjmp	.+44     	; 0x89c <stoplicht_boot+0xb4>
            break;
        case 2 : //brug is open
            PORT_led_stoplicht |= (1 << PIN_groen_onder_L) | (1 << PIN_groen_onder_R) | (1 << PIN_groen_boven_L) | (1 << PIN_groen_boven_R);
     870:	a8 e2       	ldi	r26, 0x28	; 40
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	e8 e2       	ldi	r30, 0x28	; 40
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	8f 60       	ori	r24, 0x0F	; 15
     87c:	8c 93       	st	X, r24
     87e:	0e c0       	rjmp	.+28     	; 0x89c <stoplicht_boot+0xb4>
            break;
        case 3 : //brug is dicht doorvaart toegestaan
            PORT_led_stoplicht |= (1 << PIN_rood_boven_L) | (1 << PIN_rood_boven_R);
     880:	a8 e2       	ldi	r26, 0x28	; 40
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	e8 e2       	ldi	r30, 0x28	; 40
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	80 63       	ori	r24, 0x30	; 48
     88c:	8c 93       	st	X, r24
            PORT_geel_led |= (1 << PIN_geel_led_L);
     88e:	ab e0       	ldi	r26, 0x0B	; 11
     890:	b1 e0       	ldi	r27, 0x01	; 1
     892:	eb e0       	ldi	r30, 0x0B	; 11
     894:	f1 e0       	ldi	r31, 0x01	; 1
     896:	80 81       	ld	r24, Z
     898:	81 60       	ori	r24, 0x01	; 1
     89a:	8c 93       	st	X, r24
    }
}
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	cf 91       	pop	r28
     8a8:	df 91       	pop	r29
     8aa:	08 95       	ret

000008ac <slagboom>:

void slagboom(int aan_uit) {// 1 aan, 0 uit
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	0f 92       	push	r0
     8b2:	0f 92       	push	r0
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	9a 83       	std	Y+2, r25	; 0x02
     8ba:	89 83       	std	Y+1, r24	; 0x01
    if (aan_uit) {
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	39 f0       	breq	.+14     	; 0x8d2 <slagboom+0x26>
        servo1_set_percentage(0);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <servo1_set_percentage>
        servo2_set_percentage(0);
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	0e 94 1e 10 	call	0x203c	; 0x203c <servo2_set_percentage>
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <slagboom+0x32>
    } else {
        servo1_set_percentage(100);
     8d2:	84 e6       	ldi	r24, 0x64	; 100
     8d4:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <servo1_set_percentage>
        servo2_set_percentage(100);
     8d8:	84 e6       	ldi	r24, 0x64	; 100
     8da:	0e 94 1e 10 	call	0x203c	; 0x203c <servo2_set_percentage>
    }
}
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	cf 91       	pop	r28
     8e4:	df 91       	pop	r29
     8e6:	08 95       	ret

000008e8 <__vector_15>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "h_bridge.h"

ISR(TIMER2_OVF_vect) {
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	00 90 5b 00 	lds	r0, 0x005B
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	8f 93       	push	r24
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
	if (OCR2A == 0 && OCR2B == 0)
     90a:	e3 eb       	ldi	r30, 0xB3	; 179
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	88 23       	and	r24, r24
     912:	a1 f4       	brne	.+40     	; 0x93c <__vector_15+0x54>
     914:	e4 eb       	ldi	r30, 0xB4	; 180
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	88 23       	and	r24, r24
     91c:	79 f4       	brne	.+30     	; 0x93c <__vector_15+0x54>
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
     91e:	ae e2       	ldi	r26, 0x2E	; 46
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	ee e2       	ldi	r30, 0x2E	; 46
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	8f 7d       	andi	r24, 0xDF	; 223
     92a:	8c 93       	st	X, r24
		PORT_LPWM &= ~(1<<PIN_LPWM);
     92c:	ae e2       	ldi	r26, 0x2E	; 46
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	ee e2       	ldi	r30, 0x2E	; 46
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8f 7e       	andi	r24, 0xEF	; 239
     938:	8c 93       	st	X, r24
     93a:	27 c0       	rjmp	.+78     	; 0x98a <__vector_15+0xa2>
	}
	else if (OCR2A != 0)
     93c:	e3 eb       	ldi	r30, 0xB3	; 179
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	88 23       	and	r24, r24
     944:	79 f0       	breq	.+30     	; 0x964 <__vector_15+0x7c>
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
     946:	ae e2       	ldi	r26, 0x2E	; 46
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	ee e2       	ldi	r30, 0x2E	; 46
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	8f 7e       	andi	r24, 0xEF	; 239
     952:	8c 93       	st	X, r24
		PORT_RPWM |= (1<<PIN_RPWM);
     954:	ae e2       	ldi	r26, 0x2E	; 46
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	ee e2       	ldi	r30, 0x2E	; 46
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	80 62       	ori	r24, 0x20	; 32
     960:	8c 93       	st	X, r24
     962:	13 c0       	rjmp	.+38     	; 0x98a <__vector_15+0xa2>
	}
	else if (OCR2B != 0)
     964:	e4 eb       	ldi	r30, 0xB4	; 180
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	88 23       	and	r24, r24
     96c:	71 f0       	breq	.+28     	; 0x98a <__vector_15+0xa2>
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
     96e:	ae e2       	ldi	r26, 0x2E	; 46
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	ee e2       	ldi	r30, 0x2E	; 46
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	8f 7d       	andi	r24, 0xDF	; 223
     97a:	8c 93       	st	X, r24
		PORT_LPWM |= (1<<PIN_LPWM);
     97c:	ae e2       	ldi	r26, 0x2E	; 46
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	ee e2       	ldi	r30, 0x2E	; 46
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	80 61       	ori	r24, 0x10	; 16
     988:	8c 93       	st	X, r24
	}
}
     98a:	cf 91       	pop	r28
     98c:	df 91       	pop	r29
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	8f 91       	pop	r24
     998:	0f 90       	pop	r0
     99a:	00 92 5b 00 	sts	0x005B, r0
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	00 90 5b 00 	lds	r0, 0x005B
     9b4:	0f 92       	push	r0
     9b6:	11 24       	eor	r1, r1
     9b8:	8f 93       	push	r24
     9ba:	af 93       	push	r26
     9bc:	bf 93       	push	r27
     9be:	ef 93       	push	r30
     9c0:	ff 93       	push	r31
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	if (OCR2A != 255)
     9ca:	e3 eb       	ldi	r30, 0xB3	; 179
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	39 f0       	breq	.+14     	; 0x9e2 <__vector_13+0x3a>
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
     9d4:	ae e2       	ldi	r26, 0x2E	; 46
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	ee e2       	ldi	r30, 0x2E	; 46
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	8f 7d       	andi	r24, 0xDF	; 223
     9e0:	8c 93       	st	X, r24
	}
}
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	8f 91       	pop	r24
     9f0:	0f 90       	pop	r0
     9f2:	00 92 5b 00 	sts	0x005B, r0
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_14>:

ISR(TIMER2_COMPB_vect)
{
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	00 90 5b 00 	lds	r0, 0x005B
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	8f 93       	push	r24
     a12:	af 93       	push	r26
     a14:	bf 93       	push	r27
     a16:	ef 93       	push	r30
     a18:	ff 93       	push	r31
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
	if (OCR2B != 255)
     a22:	e4 eb       	ldi	r30, 0xB4	; 180
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8f 3f       	cpi	r24, 0xFF	; 255
     a2a:	39 f0       	breq	.+14     	; 0xa3a <__vector_14+0x3a>
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
     a2c:	ae e2       	ldi	r26, 0x2E	; 46
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	ee e2       	ldi	r30, 0x2E	; 46
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	8f 7e       	andi	r24, 0xEF	; 239
     a38:	8c 93       	st	X, r24
	}
}
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	8f 91       	pop	r24
     a48:	0f 90       	pop	r0
     a4a:	00 92 5b 00 	sts	0x005B, r0
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <init_h_bridge>:

void init_h_bridge(void)
{
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
	// Config pins as output
	DDR_RPWM |= (1<<PIN_RPWM);
     a60:	ad e2       	ldi	r26, 0x2D	; 45
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	ed e2       	ldi	r30, 0x2D	; 45
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	80 62       	ori	r24, 0x20	; 32
     a6c:	8c 93       	st	X, r24
	DDR_LPWM |= (1<<PIN_LPWM);
     a6e:	ad e2       	ldi	r26, 0x2D	; 45
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e2       	ldi	r30, 0x2D	; 45
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	80 61       	ori	r24, 0x10	; 16
     a7a:	8c 93       	st	X, r24

	// Output low
	PORT_RPWM &= ~(1<<PIN_RPWM);
     a7c:	ae e2       	ldi	r26, 0x2E	; 46
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	ee e2       	ldi	r30, 0x2E	; 46
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8f 7d       	andi	r24, 0xDF	; 223
     a88:	8c 93       	st	X, r24
	PORT_LPWM &= ~(1<<PIN_LPWM);
     a8a:	ae e2       	ldi	r26, 0x2E	; 46
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	ee e2       	ldi	r30, 0x2E	; 46
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	8f 7e       	andi	r24, 0xEF	; 239
     a96:	8c 93       	st	X, r24

	// Use mode 0, clkdiv = 64
	TCCR2A = 0;
     a98:	e0 eb       	ldi	r30, 0xB0	; 176
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	10 82       	st	Z, r1
	TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20);
     a9e:	e1 eb       	ldi	r30, 0xB1	; 177
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	83 e0       	ldi	r24, 0x03	; 3
     aa4:	80 83       	st	Z, r24

	// Disable PWM output
	OCR2A = 0;
     aa6:	e3 eb       	ldi	r30, 0xB3	; 179
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	10 82       	st	Z, r1
	OCR2B = 0;
     aac:	e4 eb       	ldi	r30, 0xB4	; 180
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	10 82       	st	Z, r1

	// Interrupts on OCA, OCB and OVF
	TIMSK2 = (1<<OCIE2B) | (1<<OCIE2A) | (1<<TOIE2);
     ab2:	e0 e7       	ldi	r30, 0x70	; 112
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	80 83       	st	Z, r24

	sei();
     aba:	78 94       	sei
}
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	08 95       	ret

00000ac2 <h_bridge_set_percentage>:

void h_bridge_set_percentage(signed char percentage)
{
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	0f 92       	push	r0
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	89 83       	std	Y+1, r24	; 0x01
	if (percentage >= -100 && percentage <= 100)
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	8c 39       	cpi	r24, 0x9C	; 156
     ad2:	0c f4       	brge	.+2      	; 0xad6 <h_bridge_set_percentage+0x14>
     ad4:	46 c0       	rjmp	.+140    	; 0xb62 <h_bridge_set_percentage+0xa0>
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	85 36       	cpi	r24, 0x65	; 101
     ada:	0c f0       	brlt	.+2      	; 0xade <h_bridge_set_percentage+0x1c>
     adc:	42 c0       	rjmp	.+132    	; 0xb62 <h_bridge_set_percentage+0xa0>
	{
		if (percentage >= 0)
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	88 23       	and	r24, r24
     ae2:	04 f1       	brlt	.+64     	; 0xb24 <h_bridge_set_percentage+0x62>
		{
			// Disable LPWM, calculate RPWM
			OCR2B = 0;
     ae4:	e4 eb       	ldi	r30, 0xB4	; 180
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	10 82       	st	Z, r1
			OCR2A = (255*percentage)/100;
     aea:	e3 eb       	ldi	r30, 0xB3	; 179
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	48 2f       	mov	r20, r24
     af2:	55 27       	eor	r21, r21
     af4:	47 fd       	sbrc	r20, 7
     af6:	50 95       	com	r21
     af8:	ca 01       	movw	r24, r20
     afa:	9c 01       	movw	r18, r24
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	c9 01       	movw	r24, r18
     b02:	96 95       	lsr	r25
     b04:	98 2f       	mov	r25, r24
     b06:	88 27       	eor	r24, r24
     b08:	97 95       	ror	r25
     b0a:	87 95       	ror	r24
     b0c:	82 1b       	sub	r24, r18
     b0e:	93 0b       	sbc	r25, r19
     b10:	84 0f       	add	r24, r20
     b12:	95 1f       	adc	r25, r21
     b14:	24 e6       	ldi	r18, 0x64	; 100
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	b9 01       	movw	r22, r18
     b1a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__divmodhi4>
     b1e:	cb 01       	movw	r24, r22
     b20:	80 83       	st	Z, r24
     b22:	1f c0       	rjmp	.+62     	; 0xb62 <h_bridge_set_percentage+0xa0>
		}
		else // percentage < 0
		{
			// Disable RPWM, calculate LPWM
			OCR2A = 0;
     b24:	e3 eb       	ldi	r30, 0xB3	; 179
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	10 82       	st	Z, r1
			OCR2B = (255*percentage)/-100;
     b2a:	e4 eb       	ldi	r30, 0xB4	; 180
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	48 2f       	mov	r20, r24
     b32:	55 27       	eor	r21, r21
     b34:	47 fd       	sbrc	r20, 7
     b36:	50 95       	com	r21
     b38:	ca 01       	movw	r24, r20
     b3a:	9c 01       	movw	r18, r24
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	c9 01       	movw	r24, r18
     b42:	96 95       	lsr	r25
     b44:	98 2f       	mov	r25, r24
     b46:	88 27       	eor	r24, r24
     b48:	97 95       	ror	r25
     b4a:	87 95       	ror	r24
     b4c:	82 1b       	sub	r24, r18
     b4e:	93 0b       	sbc	r25, r19
     b50:	84 0f       	add	r24, r20
     b52:	95 1f       	adc	r25, r21
     b54:	2c e9       	ldi	r18, 0x9C	; 156
     b56:	3f ef       	ldi	r19, 0xFF	; 255
     b58:	b9 01       	movw	r22, r18
     b5a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__divmodhi4>
     b5e:	cb 01       	movw	r24, r22
     b60:	80 83       	st	Z, r24
		}
	}
}
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <main>:
#include "brug_functies.h"
#include "servo.h"
#include "util/delay.h"

int main(void)
{
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	ca 5c       	subi	r28, 0xCA	; 202
     b78:	d0 40       	sbci	r29, 0x00	; 0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
    init_h_bridge();
     b84:	0e 94 2c 05 	call	0xa58	; 0xa58 <init_h_bridge>
    init_servo();
     b88:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <init_servo>
    init_brug_functies();
     b8c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <init_brug_functies>


    stoplicht_boot(0);
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <stoplicht_boot>
    statusled(1);
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <statusled>

    if ((PIN_switch & (1 << switch_dicht)) != 0) {//als brug niet dicht is
     ba0:	e6 e0       	ldi	r30, 0x06	; 6
     ba2:	f1 e0       	ldi	r31, 0x01	; 1
     ba4:	80 81       	ld	r24, Z
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	82 70       	andi	r24, 0x02	; 2
     bac:	90 70       	andi	r25, 0x00	; 0
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <main+0x4a>
     bb2:	e0 c2       	rjmp	.+1472   	; 0x1174 <main+0x60a>
        warnlicht(1);//aan
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 ca 03 	call	0x794	; 0x794 <warnlicht>
     bbc:	fe 01       	movw	r30, r28
     bbe:	ef 53       	subi	r30, 0x3F	; 63
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	aa e7       	ldi	r26, 0x7A	; 122
     bc8:	b4 e4       	ldi	r27, 0x44	; 68
     bca:	80 83       	st	Z, r24
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	a2 83       	std	Z+2, r26	; 0x02
     bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd2:	8e 01       	movw	r16, r28
     bd4:	03 54       	subi	r16, 0x43	; 67
     bd6:	1f 4f       	sbci	r17, 0xFF	; 255
     bd8:	fe 01       	movw	r30, r28
     bda:	ef 53       	subi	r30, 0x3F	; 63
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	4a e7       	ldi	r20, 0x7A	; 122
     bec:	55 e4       	ldi	r21, 0x45	; 69
     bee:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	f8 01       	movw	r30, r16
     bf8:	80 83       	st	Z, r24
     bfa:	91 83       	std	Z+1, r25	; 0x01
     bfc:	a2 83       	std	Z+2, r26	; 0x02
     bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c00:	fe 01       	movw	r30, r28
     c02:	e3 54       	subi	r30, 0x43	; 67
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	60 81       	ld	r22, Z
     c08:	71 81       	ldd	r23, Z+1	; 0x01
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e8       	ldi	r20, 0x80	; 128
     c14:	5f e3       	ldi	r21, 0x3F	; 63
     c16:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
     c1a:	88 23       	and	r24, r24
     c1c:	44 f4       	brge	.+16     	; 0xc2e <main+0xc4>
		__ticks = 1;
     c1e:	fe 01       	movw	r30, r28
     c20:	e5 54       	subi	r30, 0x45	; 69
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	64 c0       	rjmp	.+200    	; 0xcf6 <main+0x18c>
	else if (__tmp > 65535)
     c2e:	fe 01       	movw	r30, r28
     c30:	e3 54       	subi	r30, 0x43	; 67
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	60 81       	ld	r22, Z
     c36:	71 81       	ldd	r23, Z+1	; 0x01
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	3f ef       	ldi	r19, 0xFF	; 255
     c40:	4f e7       	ldi	r20, 0x7F	; 127
     c42:	57 e4       	ldi	r21, 0x47	; 71
     c44:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
     c48:	18 16       	cp	r1, r24
     c4a:	0c f0       	brlt	.+2      	; 0xc4e <main+0xe4>
     c4c:	43 c0       	rjmp	.+134    	; 0xcd4 <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4e:	fe 01       	movw	r30, r28
     c50:	ef 53       	subi	r30, 0x3F	; 63
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e2       	ldi	r20, 0x20	; 32
     c62:	51 e4       	ldi	r21, 0x41	; 65
     c64:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	8e 01       	movw	r16, r28
     c6e:	05 54       	subi	r16, 0x45	; 69
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
     c72:	bc 01       	movw	r22, r24
     c74:	cd 01       	movw	r24, r26
     c76:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	f8 01       	movw	r30, r16
     c80:	91 83       	std	Z+1, r25	; 0x01
     c82:	80 83       	st	Z, r24
     c84:	1f c0       	rjmp	.+62     	; 0xcc4 <main+0x15a>
     c86:	fe 01       	movw	r30, r28
     c88:	e7 54       	subi	r30, 0x47	; 71
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	80 e9       	ldi	r24, 0x90	; 144
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	80 83       	st	Z, r24
     c94:	fe 01       	movw	r30, r28
     c96:	e7 54       	subi	r30, 0x47	; 71
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 81       	ld	r24, Z
     c9c:	91 81       	ldd	r25, Z+1	; 0x01
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <main+0x134>
     ca2:	fe 01       	movw	r30, r28
     ca4:	e7 54       	subi	r30, 0x47	; 71
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	91 83       	std	Z+1, r25	; 0x01
     caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cac:	de 01       	movw	r26, r28
     cae:	a5 54       	subi	r26, 0x45	; 69
     cb0:	bf 4f       	sbci	r27, 0xFF	; 255
     cb2:	fe 01       	movw	r30, r28
     cb4:	e5 54       	subi	r30, 0x45	; 69
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	80 81       	ld	r24, Z
     cba:	91 81       	ldd	r25, Z+1	; 0x01
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc4:	fe 01       	movw	r30, r28
     cc6:	e5 54       	subi	r30, 0x45	; 69
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	d1 f6       	brne	.-76     	; 0xc86 <main+0x11c>
     cd2:	27 c0       	rjmp	.+78     	; 0xd22 <main+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd4:	8e 01       	movw	r16, r28
     cd6:	05 54       	subi	r16, 0x45	; 69
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	fe 01       	movw	r30, r28
     cdc:	e3 54       	subi	r30, 0x43	; 67
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	f8 01       	movw	r30, r16
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	80 83       	st	Z, r24
     cf6:	de 01       	movw	r26, r28
     cf8:	a9 54       	subi	r26, 0x49	; 73
     cfa:	bf 4f       	sbci	r27, 0xFF	; 255
     cfc:	fe 01       	movw	r30, r28
     cfe:	e5 54       	subi	r30, 0x45	; 69
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	8d 93       	st	X+, r24
     d08:	9c 93       	st	X, r25
     d0a:	fe 01       	movw	r30, r28
     d0c:	e9 54       	subi	r30, 0x49	; 73
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <main+0x1aa>
     d18:	fe 01       	movw	r30, r28
     d1a:	e9 54       	subi	r30, 0x49	; 73
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
        _delay_ms(1000);
        slagboom(1);//dicht
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 56 04 	call	0x8ac	; 0x8ac <slagboom>
     d2a:	fe 01       	movw	r30, r28
     d2c:	ed 54       	subi	r30, 0x4D	; 77
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	aa e7       	ldi	r26, 0x7A	; 122
     d36:	b4 e4       	ldi	r27, 0x44	; 68
     d38:	80 83       	st	Z, r24
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	a2 83       	std	Z+2, r26	; 0x02
     d3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d40:	8e 01       	movw	r16, r28
     d42:	01 55       	subi	r16, 0x51	; 81
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	fe 01       	movw	r30, r28
     d48:	ed 54       	subi	r30, 0x4D	; 77
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	4a e7       	ldi	r20, 0x7A	; 122
     d5a:	55 e4       	ldi	r21, 0x45	; 69
     d5c:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	f8 01       	movw	r30, r16
     d66:	80 83       	st	Z, r24
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	a2 83       	std	Z+2, r26	; 0x02
     d6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d6e:	fe 01       	movw	r30, r28
     d70:	e1 55       	subi	r30, 0x51	; 81
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	44 f4       	brge	.+16     	; 0xd9c <main+0x232>
		__ticks = 1;
     d8c:	fe 01       	movw	r30, r28
     d8e:	e3 55       	subi	r30, 0x53	; 83
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
     d9a:	64 c0       	rjmp	.+200    	; 0xe64 <main+0x2fa>
	else if (__tmp > 65535)
     d9c:	fe 01       	movw	r30, r28
     d9e:	e1 55       	subi	r30, 0x51	; 81
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	60 81       	ld	r22, Z
     da4:	71 81       	ldd	r23, Z+1	; 0x01
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	3f ef       	ldi	r19, 0xFF	; 255
     dae:	4f e7       	ldi	r20, 0x7F	; 127
     db0:	57 e4       	ldi	r21, 0x47	; 71
     db2:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
     db6:	18 16       	cp	r1, r24
     db8:	0c f0       	brlt	.+2      	; 0xdbc <main+0x252>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <main+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbc:	fe 01       	movw	r30, r28
     dbe:	ed 54       	subi	r30, 0x4D	; 77
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	8e 01       	movw	r16, r28
     ddc:	03 55       	subi	r16, 0x53	; 83
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	bc 01       	movw	r22, r24
     de2:	cd 01       	movw	r24, r26
     de4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	f8 01       	movw	r30, r16
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	1f c0       	rjmp	.+62     	; 0xe32 <main+0x2c8>
     df4:	fe 01       	movw	r30, r28
     df6:	e5 55       	subi	r30, 0x55	; 85
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	80 e9       	ldi	r24, 0x90	; 144
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	fe 01       	movw	r30, r28
     e04:	e5 55       	subi	r30, 0x55	; 85
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <main+0x2a2>
     e10:	fe 01       	movw	r30, r28
     e12:	e5 55       	subi	r30, 0x55	; 85
     e14:	ff 4f       	sbci	r31, 0xFF	; 255
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1a:	de 01       	movw	r26, r28
     e1c:	a3 55       	subi	r26, 0x53	; 83
     e1e:	bf 4f       	sbci	r27, 0xFF	; 255
     e20:	fe 01       	movw	r30, r28
     e22:	e3 55       	subi	r30, 0x53	; 83
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	9c 93       	st	X, r25
     e30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e32:	fe 01       	movw	r30, r28
     e34:	e3 55       	subi	r30, 0x53	; 83
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	d1 f6       	brne	.-76     	; 0xdf4 <main+0x28a>
     e40:	27 c0       	rjmp	.+78     	; 0xe90 <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e42:	8e 01       	movw	r16, r28
     e44:	03 55       	subi	r16, 0x53	; 83
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	fe 01       	movw	r30, r28
     e4a:	e1 55       	subi	r30, 0x51	; 81
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	f8 01       	movw	r30, r16
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24
     e64:	de 01       	movw	r26, r28
     e66:	a7 55       	subi	r26, 0x57	; 87
     e68:	bf 4f       	sbci	r27, 0xFF	; 255
     e6a:	fe 01       	movw	r30, r28
     e6c:	e3 55       	subi	r30, 0x53	; 83
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	8d 93       	st	X+, r24
     e76:	9c 93       	st	X, r25
     e78:	fe 01       	movw	r30, r28
     e7a:	e7 55       	subi	r30, 0x57	; 87
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <main+0x318>
     e86:	fe 01       	movw	r30, r28
     e88:	e7 55       	subi	r30, 0x57	; 87
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	80 83       	st	Z, r24
        _delay_ms(1000);
        brugdek(0);//dicht
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 46 01 	call	0x28c	; 0x28c <brugdek>
     e98:	fe 01       	movw	r30, r28
     e9a:	eb 55       	subi	r30, 0x5B	; 91
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	aa e7       	ldi	r26, 0x7A	; 122
     ea4:	b4 e4       	ldi	r27, 0x44	; 68
     ea6:	80 83       	st	Z, r24
     ea8:	91 83       	std	Z+1, r25	; 0x01
     eaa:	a2 83       	std	Z+2, r26	; 0x02
     eac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eae:	8e 01       	movw	r16, r28
     eb0:	0f 55       	subi	r16, 0x5F	; 95
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	fe 01       	movw	r30, r28
     eb6:	eb 55       	subi	r30, 0x5B	; 91
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	4a e7       	ldi	r20, 0x7A	; 122
     ec8:	55 e4       	ldi	r21, 0x45	; 69
     eca:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	f8 01       	movw	r30, r16
     ed4:	80 83       	st	Z, r24
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	a2 83       	std	Z+2, r26	; 0x02
     eda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     edc:	fe 01       	movw	r30, r28
     ede:	ef 55       	subi	r30, 0x5F	; 95
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
     ef6:	88 23       	and	r24, r24
     ef8:	44 f4       	brge	.+16     	; 0xf0a <main+0x3a0>
		__ticks = 1;
     efa:	fe 01       	movw	r30, r28
     efc:	e1 56       	subi	r30, 0x61	; 97
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	91 83       	std	Z+1, r25	; 0x01
     f06:	80 83       	st	Z, r24
     f08:	64 c0       	rjmp	.+200    	; 0xfd2 <main+0x468>
	else if (__tmp > 65535)
     f0a:	fe 01       	movw	r30, r28
     f0c:	ef 55       	subi	r30, 0x5F	; 95
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	60 81       	ld	r22, Z
     f12:	71 81       	ldd	r23, Z+1	; 0x01
     f14:	82 81       	ldd	r24, Z+2	; 0x02
     f16:	93 81       	ldd	r25, Z+3	; 0x03
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	3f ef       	ldi	r19, 0xFF	; 255
     f1c:	4f e7       	ldi	r20, 0x7F	; 127
     f1e:	57 e4       	ldi	r21, 0x47	; 71
     f20:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
     f24:	18 16       	cp	r1, r24
     f26:	0c f0       	brlt	.+2      	; 0xf2a <main+0x3c0>
     f28:	43 c0       	rjmp	.+134    	; 0xfb0 <main+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2a:	fe 01       	movw	r30, r28
     f2c:	eb 55       	subi	r30, 0x5B	; 91
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	60 81       	ld	r22, Z
     f32:	71 81       	ldd	r23, Z+1	; 0x01
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e2       	ldi	r20, 0x20	; 32
     f3e:	51 e4       	ldi	r21, 0x41	; 65
     f40:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8e 01       	movw	r16, r28
     f4a:	01 56       	subi	r16, 0x61	; 97
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	f8 01       	movw	r30, r16
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
     f60:	1f c0       	rjmp	.+62     	; 0xfa0 <main+0x436>
     f62:	fe 01       	movw	r30, r28
     f64:	e3 56       	subi	r30, 0x63	; 99
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 e9       	ldi	r24, 0x90	; 144
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
     f70:	fe 01       	movw	r30, r28
     f72:	e3 56       	subi	r30, 0x63	; 99
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <main+0x410>
     f7e:	fe 01       	movw	r30, r28
     f80:	e3 56       	subi	r30, 0x63	; 99
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f88:	de 01       	movw	r26, r28
     f8a:	a1 56       	subi	r26, 0x61	; 97
     f8c:	bf 4f       	sbci	r27, 0xFF	; 255
     f8e:	fe 01       	movw	r30, r28
     f90:	e1 56       	subi	r30, 0x61	; 97
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	11 96       	adiw	r26, 0x01	; 1
     f9c:	9c 93       	st	X, r25
     f9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa0:	fe 01       	movw	r30, r28
     fa2:	e1 56       	subi	r30, 0x61	; 97
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	80 81       	ld	r24, Z
     fa8:	91 81       	ldd	r25, Z+1	; 0x01
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	d1 f6       	brne	.-76     	; 0xf62 <main+0x3f8>
     fae:	27 c0       	rjmp	.+78     	; 0xffe <main+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	8e 01       	movw	r16, r28
     fb2:	01 56       	subi	r16, 0x61	; 97
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	fe 01       	movw	r30, r28
     fb8:	ef 55       	subi	r30, 0x5F	; 95
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	60 81       	ld	r22, Z
     fbe:	71 81       	ldd	r23, Z+1	; 0x01
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	93 81       	ldd	r25, Z+3	; 0x03
     fc4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	f8 01       	movw	r30, r16
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
     fd2:	de 01       	movw	r26, r28
     fd4:	a5 56       	subi	r26, 0x65	; 101
     fd6:	bf 4f       	sbci	r27, 0xFF	; 255
     fd8:	fe 01       	movw	r30, r28
     fda:	e1 56       	subi	r30, 0x61	; 97
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	8d 93       	st	X+, r24
     fe4:	9c 93       	st	X, r25
     fe6:	fe 01       	movw	r30, r28
     fe8:	e5 56       	subi	r30, 0x65	; 101
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <main+0x486>
     ff4:	fe 01       	movw	r30, r28
     ff6:	e5 56       	subi	r30, 0x65	; 101
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
        _delay_ms(1000);
        slagboom(0);//open
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 56 04 	call	0x8ac	; 0x8ac <slagboom>
    1006:	fe 01       	movw	r30, r28
    1008:	e9 56       	subi	r30, 0x69	; 105
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	aa e7       	ldi	r26, 0x7A	; 122
    1012:	b4 e4       	ldi	r27, 0x44	; 68
    1014:	80 83       	st	Z, r24
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	a2 83       	std	Z+2, r26	; 0x02
    101a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101c:	8e 01       	movw	r16, r28
    101e:	0d 56       	subi	r16, 0x6D	; 109
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	fe 01       	movw	r30, r28
    1024:	e9 56       	subi	r30, 0x69	; 105
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	4a e7       	ldi	r20, 0x7A	; 122
    1036:	55 e4       	ldi	r21, 0x45	; 69
    1038:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	f8 01       	movw	r30, r16
    1042:	80 83       	st	Z, r24
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	a2 83       	std	Z+2, r26	; 0x02
    1048:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    104a:	fe 01       	movw	r30, r28
    104c:	ed 56       	subi	r30, 0x6D	; 109
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	60 81       	ld	r22, Z
    1052:	71 81       	ldd	r23, Z+1	; 0x01
    1054:	82 81       	ldd	r24, Z+2	; 0x02
    1056:	93 81       	ldd	r25, Z+3	; 0x03
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    1064:	88 23       	and	r24, r24
    1066:	44 f4       	brge	.+16     	; 0x1078 <main+0x50e>
		__ticks = 1;
    1068:	fe 01       	movw	r30, r28
    106a:	ef 56       	subi	r30, 0x6F	; 111
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	80 83       	st	Z, r24
    1076:	64 c0       	rjmp	.+200    	; 0x1140 <main+0x5d6>
	else if (__tmp > 65535)
    1078:	fe 01       	movw	r30, r28
    107a:	ed 56       	subi	r30, 0x6D	; 109
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	3f ef       	ldi	r19, 0xFF	; 255
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	57 e4       	ldi	r21, 0x47	; 71
    108e:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    1092:	18 16       	cp	r1, r24
    1094:	0c f0       	brlt	.+2      	; 0x1098 <main+0x52e>
    1096:	43 c0       	rjmp	.+134    	; 0x111e <main+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	fe 01       	movw	r30, r28
    109a:	e9 56       	subi	r30, 0x69	; 105
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	93 81       	ldd	r25, Z+3	; 0x03
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e2       	ldi	r20, 0x20	; 32
    10ac:	51 e4       	ldi	r21, 0x41	; 65
    10ae:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	8e 01       	movw	r16, r28
    10b8:	0f 56       	subi	r16, 0x6F	; 111
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	f8 01       	movw	r30, r16
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
    10ce:	1f c0       	rjmp	.+62     	; 0x110e <main+0x5a4>
    10d0:	fe 01       	movw	r30, r28
    10d2:	e1 57       	subi	r30, 0x71	; 113
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 e9       	ldi	r24, 0x90	; 144
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
    10de:	fe 01       	movw	r30, r28
    10e0:	e1 57       	subi	r30, 0x71	; 113
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <main+0x57e>
    10ec:	fe 01       	movw	r30, r28
    10ee:	e1 57       	subi	r30, 0x71	; 113
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	91 83       	std	Z+1, r25	; 0x01
    10f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	de 01       	movw	r26, r28
    10f8:	af 56       	subi	r26, 0x6F	; 111
    10fa:	bf 4f       	sbci	r27, 0xFF	; 255
    10fc:	fe 01       	movw	r30, r28
    10fe:	ef 56       	subi	r30, 0x6F	; 111
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	9c 93       	st	X, r25
    110c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	fe 01       	movw	r30, r28
    1110:	ef 56       	subi	r30, 0x6F	; 111
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	d1 f6       	brne	.-76     	; 0x10d0 <main+0x566>
    111c:	27 c0       	rjmp	.+78     	; 0x116c <main+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111e:	8e 01       	movw	r16, r28
    1120:	0f 56       	subi	r16, 0x6F	; 111
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	fe 01       	movw	r30, r28
    1126:	ed 56       	subi	r30, 0x6D	; 109
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	f8 01       	movw	r30, r16
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24
    1140:	de 01       	movw	r26, r28
    1142:	a3 57       	subi	r26, 0x73	; 115
    1144:	bf 4f       	sbci	r27, 0xFF	; 255
    1146:	fe 01       	movw	r30, r28
    1148:	ef 56       	subi	r30, 0x6F	; 111
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	8d 93       	st	X+, r24
    1152:	9c 93       	st	X, r25
    1154:	fe 01       	movw	r30, r28
    1156:	e3 57       	subi	r30, 0x73	; 115
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	80 81       	ld	r24, Z
    115c:	91 81       	ldd	r25, Z+1	; 0x01
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <main+0x5f4>
    1162:	fe 01       	movw	r30, r28
    1164:	e3 57       	subi	r30, 0x73	; 115
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24
        _delay_ms(1000);
        warnlicht(0);//uit
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 ca 03 	call	0x794	; 0x794 <warnlicht>
    }
    stoplicht_boot(3);
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <stoplicht_boot>
    statusled(0);
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 7e 03 	call	0x6fc	; 0x6fc <statusled>



    while(1) {

        if (((PIN_knop & (1 << knop_paneel)) == 0) | ((PIN_knop & (1 << knop_voor)) == 0) | ((PIN_knop & (1 << knop_achter)) == 0)) {
    1184:	e6 e0       	ldi	r30, 0x06	; 6
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	80 81       	ld	r24, Z
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	84 70       	andi	r24, 0x04	; 4
    1190:	90 70       	andi	r25, 0x00	; 0
    1192:	c6 53       	subi	r28, 0x36	; 54
    1194:	df 4f       	sbci	r29, 0xFF	; 255
    1196:	18 82       	st	Y, r1
    1198:	ca 5c       	subi	r28, 0xCA	; 202
    119a:	d0 40       	sbci	r29, 0x00	; 0
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	31 f4       	brne	.+12     	; 0x11ac <main+0x642>
    11a0:	f1 e0       	ldi	r31, 0x01	; 1
    11a2:	c6 53       	subi	r28, 0x36	; 54
    11a4:	df 4f       	sbci	r29, 0xFF	; 255
    11a6:	f8 83       	st	Y, r31
    11a8:	ca 5c       	subi	r28, 0xCA	; 202
    11aa:	d0 40       	sbci	r29, 0x00	; 0
    11ac:	e6 e0       	ldi	r30, 0x06	; 6
    11ae:	f1 e0       	ldi	r31, 0x01	; 1
    11b0:	80 81       	ld	r24, Z
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	88 70       	andi	r24, 0x08	; 8
    11b8:	90 70       	andi	r25, 0x00	; 0
    11ba:	c7 53       	subi	r28, 0x37	; 55
    11bc:	df 4f       	sbci	r29, 0xFF	; 255
    11be:	18 82       	st	Y, r1
    11c0:	c9 5c       	subi	r28, 0xC9	; 201
    11c2:	d0 40       	sbci	r29, 0x00	; 0
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	31 f4       	brne	.+12     	; 0x11d4 <main+0x66a>
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	c7 53       	subi	r28, 0x37	; 55
    11cc:	df 4f       	sbci	r29, 0xFF	; 255
    11ce:	28 83       	st	Y, r18
    11d0:	c9 5c       	subi	r28, 0xC9	; 201
    11d2:	d0 40       	sbci	r29, 0x00	; 0
    11d4:	c6 53       	subi	r28, 0x36	; 54
    11d6:	df 4f       	sbci	r29, 0xFF	; 255
    11d8:	88 81       	ld	r24, Y
    11da:	ca 5c       	subi	r28, 0xCA	; 202
    11dc:	d0 40       	sbci	r29, 0x00	; 0
    11de:	c7 53       	subi	r28, 0x37	; 55
    11e0:	df 4f       	sbci	r29, 0xFF	; 255
    11e2:	38 81       	ld	r19, Y
    11e4:	c9 5c       	subi	r28, 0xC9	; 201
    11e6:	d0 40       	sbci	r29, 0x00	; 0
    11e8:	83 2b       	or	r24, r19
    11ea:	e8 2f       	mov	r30, r24
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	c9 53       	subi	r28, 0x39	; 57
    11f0:	df 4f       	sbci	r29, 0xFF	; 255
    11f2:	f9 83       	std	Y+1, r31	; 0x01
    11f4:	e8 83       	st	Y, r30
    11f6:	c7 5c       	subi	r28, 0xC7	; 199
    11f8:	d0 40       	sbci	r29, 0x00	; 0
    11fa:	e6 e0       	ldi	r30, 0x06	; 6
    11fc:	f1 e0       	ldi	r31, 0x01	; 1
    11fe:	80 81       	ld	r24, Z
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	80 71       	andi	r24, 0x10	; 16
    1206:	90 70       	andi	r25, 0x00	; 0
    1208:	cb 53       	subi	r28, 0x3B	; 59
    120a:	df 4f       	sbci	r29, 0xFF	; 255
    120c:	19 82       	std	Y+1, r1	; 0x01
    120e:	18 82       	st	Y, r1
    1210:	c5 5c       	subi	r28, 0xC5	; 197
    1212:	d0 40       	sbci	r29, 0x00	; 0
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	41 f4       	brne	.+16     	; 0x1228 <main+0x6be>
    1218:	21 e0       	ldi	r18, 0x01	; 1
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	cb 53       	subi	r28, 0x3B	; 59
    121e:	df 4f       	sbci	r29, 0xFF	; 255
    1220:	39 83       	std	Y+1, r19	; 0x01
    1222:	28 83       	st	Y, r18
    1224:	c5 5c       	subi	r28, 0xC5	; 197
    1226:	d0 40       	sbci	r29, 0x00	; 0
    1228:	c9 53       	subi	r28, 0x39	; 57
    122a:	df 4f       	sbci	r29, 0xFF	; 255
    122c:	88 81       	ld	r24, Y
    122e:	99 81       	ldd	r25, Y+1	; 0x01
    1230:	c7 5c       	subi	r28, 0xC7	; 199
    1232:	d0 40       	sbci	r29, 0x00	; 0
    1234:	cb 53       	subi	r28, 0x3B	; 59
    1236:	df 4f       	sbci	r29, 0xFF	; 255
    1238:	e8 81       	ld	r30, Y
    123a:	f9 81       	ldd	r31, Y+1	; 0x01
    123c:	c5 5c       	subi	r28, 0xC5	; 197
    123e:	d0 40       	sbci	r29, 0x00	; 0
    1240:	8e 2b       	or	r24, r30
    1242:	9f 2b       	or	r25, r31
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	09 f4       	brne	.+2      	; 0x124a <main+0x6e0>
    1248:	9d cf       	rjmp	.-198    	; 0x1184 <main+0x61a>
            stoplicht_boot(1);
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <stoplicht_boot>
            warnlicht(1);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 ca 03 	call	0x794	; 0x794 <warnlicht>
            statusled(1);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <statusled>
    1262:	fe 01       	movw	r30, r28
    1264:	e7 57       	subi	r30, 0x77	; 119
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	aa e7       	ldi	r26, 0x7A	; 122
    126e:	b4 e4       	ldi	r27, 0x44	; 68
    1270:	80 83       	st	Z, r24
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	a2 83       	std	Z+2, r26	; 0x02
    1276:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1278:	8e 01       	movw	r16, r28
    127a:	0b 57       	subi	r16, 0x7B	; 123
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	fe 01       	movw	r30, r28
    1280:	e7 57       	subi	r30, 0x77	; 119
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	60 81       	ld	r22, Z
    1286:	71 81       	ldd	r23, Z+1	; 0x01
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	93 81       	ldd	r25, Z+3	; 0x03
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a e7       	ldi	r20, 0x7A	; 122
    1292:	55 e4       	ldi	r21, 0x45	; 69
    1294:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	f8 01       	movw	r30, r16
    129e:	80 83       	st	Z, r24
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	a2 83       	std	Z+2, r26	; 0x02
    12a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12a6:	fe 01       	movw	r30, r28
    12a8:	eb 57       	subi	r30, 0x7B	; 123
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	60 81       	ld	r22, Z
    12ae:	71 81       	ldd	r23, Z+1	; 0x01
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e8       	ldi	r20, 0x80	; 128
    12ba:	5f e3       	ldi	r21, 0x3F	; 63
    12bc:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    12c0:	88 23       	and	r24, r24
    12c2:	44 f4       	brge	.+16     	; 0x12d4 <main+0x76a>
		__ticks = 1;
    12c4:	fe 01       	movw	r30, r28
    12c6:	ed 57       	subi	r30, 0x7D	; 125
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	80 83       	st	Z, r24
    12d2:	64 c0       	rjmp	.+200    	; 0x139c <main+0x832>
	else if (__tmp > 65535)
    12d4:	fe 01       	movw	r30, r28
    12d6:	eb 57       	subi	r30, 0x7B	; 123
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	57 e4       	ldi	r21, 0x47	; 71
    12ea:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    12ee:	18 16       	cp	r1, r24
    12f0:	0c f0       	brlt	.+2      	; 0x12f4 <main+0x78a>
    12f2:	43 c0       	rjmp	.+134    	; 0x137a <main+0x810>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f4:	fe 01       	movw	r30, r28
    12f6:	e7 57       	subi	r30, 0x77	; 119
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8e 01       	movw	r16, r28
    1314:	0d 57       	subi	r16, 0x7D	; 125
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	f8 01       	movw	r30, r16
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
    132a:	1f c0       	rjmp	.+62     	; 0x136a <main+0x800>
    132c:	fe 01       	movw	r30, r28
    132e:	ef 57       	subi	r30, 0x7F	; 127
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 e9       	ldi	r24, 0x90	; 144
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24
    133a:	fe 01       	movw	r30, r28
    133c:	ef 57       	subi	r30, 0x7F	; 127
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <main+0x7da>
    1348:	fe 01       	movw	r30, r28
    134a:	ef 57       	subi	r30, 0x7F	; 127
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	de 01       	movw	r26, r28
    1354:	ad 57       	subi	r26, 0x7D	; 125
    1356:	bf 4f       	sbci	r27, 0xFF	; 255
    1358:	fe 01       	movw	r30, r28
    135a:	ed 57       	subi	r30, 0x7D	; 125
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	11 96       	adiw	r26, 0x01	; 1
    1366:	9c 93       	st	X, r25
    1368:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136a:	fe 01       	movw	r30, r28
    136c:	ed 57       	subi	r30, 0x7D	; 125
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	d1 f6       	brne	.-76     	; 0x132c <main+0x7c2>
    1378:	27 c0       	rjmp	.+78     	; 0x13c8 <main+0x85e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137a:	8e 01       	movw	r16, r28
    137c:	0d 57       	subi	r16, 0x7D	; 125
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	fe 01       	movw	r30, r28
    1382:	eb 57       	subi	r30, 0x7B	; 123
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	f8 01       	movw	r30, r16
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
    139c:	de 01       	movw	r26, r28
    139e:	a1 58       	subi	r26, 0x81	; 129
    13a0:	bf 4f       	sbci	r27, 0xFF	; 255
    13a2:	fe 01       	movw	r30, r28
    13a4:	ed 57       	subi	r30, 0x7D	; 125
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	8d 93       	st	X+, r24
    13ae:	9c 93       	st	X, r25
    13b0:	fe 01       	movw	r30, r28
    13b2:	e1 58       	subi	r30, 0x81	; 129
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	80 81       	ld	r24, Z
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <main+0x850>
    13be:	fe 01       	movw	r30, r28
    13c0:	e1 58       	subi	r30, 0x81	; 129
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
                _delay_ms(1000);
            slagboom(1);
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 56 04 	call	0x8ac	; 0x8ac <slagboom>
    13d0:	fe 01       	movw	r30, r28
    13d2:	e5 58       	subi	r30, 0x85	; 133
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	aa e7       	ldi	r26, 0x7A	; 122
    13dc:	b4 e4       	ldi	r27, 0x44	; 68
    13de:	80 83       	st	Z, r24
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	a2 83       	std	Z+2, r26	; 0x02
    13e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e6:	8e 01       	movw	r16, r28
    13e8:	09 58       	subi	r16, 0x89	; 137
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	fe 01       	movw	r30, r28
    13ee:	e5 58       	subi	r30, 0x85	; 133
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	60 81       	ld	r22, Z
    13f4:	71 81       	ldd	r23, Z+1	; 0x01
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	4a e7       	ldi	r20, 0x7A	; 122
    1400:	55 e4       	ldi	r21, 0x45	; 69
    1402:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	f8 01       	movw	r30, r16
    140c:	80 83       	st	Z, r24
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	a2 83       	std	Z+2, r26	; 0x02
    1412:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1414:	fe 01       	movw	r30, r28
    1416:	e9 58       	subi	r30, 0x89	; 137
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	60 81       	ld	r22, Z
    141c:	71 81       	ldd	r23, Z+1	; 0x01
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e8       	ldi	r20, 0x80	; 128
    1428:	5f e3       	ldi	r21, 0x3F	; 63
    142a:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    142e:	88 23       	and	r24, r24
    1430:	44 f4       	brge	.+16     	; 0x1442 <main+0x8d8>
		__ticks = 1;
    1432:	fe 01       	movw	r30, r28
    1434:	eb 58       	subi	r30, 0x8B	; 139
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
    1440:	64 c0       	rjmp	.+200    	; 0x150a <main+0x9a0>
	else if (__tmp > 65535)
    1442:	fe 01       	movw	r30, r28
    1444:	e9 58       	subi	r30, 0x89	; 137
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	3f ef       	ldi	r19, 0xFF	; 255
    1454:	4f e7       	ldi	r20, 0x7F	; 127
    1456:	57 e4       	ldi	r21, 0x47	; 71
    1458:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    145c:	18 16       	cp	r1, r24
    145e:	0c f0       	brlt	.+2      	; 0x1462 <main+0x8f8>
    1460:	43 c0       	rjmp	.+134    	; 0x14e8 <main+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	fe 01       	movw	r30, r28
    1464:	e5 58       	subi	r30, 0x85	; 133
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e2       	ldi	r20, 0x20	; 32
    1476:	51 e4       	ldi	r21, 0x41	; 65
    1478:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8e 01       	movw	r16, r28
    1482:	0b 58       	subi	r16, 0x8B	; 139
    1484:	1f 4f       	sbci	r17, 0xFF	; 255
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	f8 01       	movw	r30, r16
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
    1498:	1f c0       	rjmp	.+62     	; 0x14d8 <main+0x96e>
    149a:	fe 01       	movw	r30, r28
    149c:	ed 58       	subi	r30, 0x8D	; 141
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 e9       	ldi	r24, 0x90	; 144
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
    14a8:	fe 01       	movw	r30, r28
    14aa:	ed 58       	subi	r30, 0x8D	; 141
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <main+0x948>
    14b6:	fe 01       	movw	r30, r28
    14b8:	ed 58       	subi	r30, 0x8D	; 141
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	91 83       	std	Z+1, r25	; 0x01
    14be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	de 01       	movw	r26, r28
    14c2:	ab 58       	subi	r26, 0x8B	; 139
    14c4:	bf 4f       	sbci	r27, 0xFF	; 255
    14c6:	fe 01       	movw	r30, r28
    14c8:	eb 58       	subi	r30, 0x8B	; 139
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	11 96       	adiw	r26, 0x01	; 1
    14d4:	9c 93       	st	X, r25
    14d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d8:	fe 01       	movw	r30, r28
    14da:	eb 58       	subi	r30, 0x8B	; 139
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	d1 f6       	brne	.-76     	; 0x149a <main+0x930>
    14e6:	27 c0       	rjmp	.+78     	; 0x1536 <main+0x9cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e8:	8e 01       	movw	r16, r28
    14ea:	0b 58       	subi	r16, 0x8B	; 139
    14ec:	1f 4f       	sbci	r17, 0xFF	; 255
    14ee:	fe 01       	movw	r30, r28
    14f0:	e9 58       	subi	r30, 0x89	; 137
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	60 81       	ld	r22, Z
    14f6:	71 81       	ldd	r23, Z+1	; 0x01
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	f8 01       	movw	r30, r16
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	80 83       	st	Z, r24
    150a:	de 01       	movw	r26, r28
    150c:	af 58       	subi	r26, 0x8F	; 143
    150e:	bf 4f       	sbci	r27, 0xFF	; 255
    1510:	fe 01       	movw	r30, r28
    1512:	eb 58       	subi	r30, 0x8B	; 139
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	80 81       	ld	r24, Z
    1518:	91 81       	ldd	r25, Z+1	; 0x01
    151a:	8d 93       	st	X+, r24
    151c:	9c 93       	st	X, r25
    151e:	fe 01       	movw	r30, r28
    1520:	ef 58       	subi	r30, 0x8F	; 143
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <main+0x9be>
    152c:	fe 01       	movw	r30, r28
    152e:	ef 58       	subi	r30, 0x8F	; 143
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	80 83       	st	Z, r24
                _delay_ms(1000);
            brugdek(1);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 46 01 	call	0x28c	; 0x28c <brugdek>
            stoplicht_boot(2);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <stoplicht_boot>
            statusled(2);
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <statusled>
    154e:	fe 01       	movw	r30, r28
    1550:	e3 59       	subi	r30, 0x93	; 147
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	aa e7       	ldi	r26, 0x7A	; 122
    155a:	b4 e4       	ldi	r27, 0x44	; 68
    155c:	80 83       	st	Z, r24
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	a2 83       	std	Z+2, r26	; 0x02
    1562:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1564:	8e 01       	movw	r16, r28
    1566:	07 59       	subi	r16, 0x97	; 151
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	fe 01       	movw	r30, r28
    156c:	e3 59       	subi	r30, 0x93	; 147
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	4a e7       	ldi	r20, 0x7A	; 122
    157e:	55 e4       	ldi	r21, 0x45	; 69
    1580:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	f8 01       	movw	r30, r16
    158a:	80 83       	st	Z, r24
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	a2 83       	std	Z+2, r26	; 0x02
    1590:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1592:	fe 01       	movw	r30, r28
    1594:	e7 59       	subi	r30, 0x97	; 151
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	60 81       	ld	r22, Z
    159a:	71 81       	ldd	r23, Z+1	; 0x01
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	93 81       	ldd	r25, Z+3	; 0x03
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	44 f4       	brge	.+16     	; 0x15c0 <main+0xa56>
		__ticks = 1;
    15b0:	fe 01       	movw	r30, r28
    15b2:	e9 59       	subi	r30, 0x99	; 153
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	64 c0       	rjmp	.+200    	; 0x1688 <main+0xb1e>
	else if (__tmp > 65535)
    15c0:	fe 01       	movw	r30, r28
    15c2:	e7 59       	subi	r30, 0x97	; 151
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	0c f0       	brlt	.+2      	; 0x15e0 <main+0xa76>
    15de:	43 c0       	rjmp	.+134    	; 0x1666 <main+0xafc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e0:	fe 01       	movw	r30, r28
    15e2:	e3 59       	subi	r30, 0x93	; 147
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8e 01       	movw	r16, r28
    1600:	09 59       	subi	r16, 0x99	; 153
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	f8 01       	movw	r30, r16
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	1f c0       	rjmp	.+62     	; 0x1656 <main+0xaec>
    1618:	fe 01       	movw	r30, r28
    161a:	eb 59       	subi	r30, 0x9B	; 155
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 e9       	ldi	r24, 0x90	; 144
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	80 83       	st	Z, r24
    1626:	fe 01       	movw	r30, r28
    1628:	eb 59       	subi	r30, 0x9B	; 155
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <main+0xac6>
    1634:	fe 01       	movw	r30, r28
    1636:	eb 59       	subi	r30, 0x9B	; 155
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	de 01       	movw	r26, r28
    1640:	a9 59       	subi	r26, 0x99	; 153
    1642:	bf 4f       	sbci	r27, 0xFF	; 255
    1644:	fe 01       	movw	r30, r28
    1646:	e9 59       	subi	r30, 0x99	; 153
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	9c 93       	st	X, r25
    1654:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1656:	fe 01       	movw	r30, r28
    1658:	e9 59       	subi	r30, 0x99	; 153
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	d1 f6       	brne	.-76     	; 0x1618 <main+0xaae>
    1664:	27 c0       	rjmp	.+78     	; 0x16b4 <main+0xb4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1666:	8e 01       	movw	r16, r28
    1668:	09 59       	subi	r16, 0x99	; 153
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	fe 01       	movw	r30, r28
    166e:	e7 59       	subi	r30, 0x97	; 151
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	f8 01       	movw	r30, r16
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
    1688:	de 01       	movw	r26, r28
    168a:	ad 59       	subi	r26, 0x9D	; 157
    168c:	bf 4f       	sbci	r27, 0xFF	; 255
    168e:	fe 01       	movw	r30, r28
    1690:	e9 59       	subi	r30, 0x99	; 153
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	8d 93       	st	X+, r24
    169a:	9c 93       	st	X, r25
    169c:	fe 01       	movw	r30, r28
    169e:	ed 59       	subi	r30, 0x9D	; 157
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <main+0xb3c>
    16aa:	fe 01       	movw	r30, r28
    16ac:	ed 59       	subi	r30, 0x9D	; 157
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
    16b4:	fe 01       	movw	r30, r28
    16b6:	e1 5a       	subi	r30, 0xA1	; 161
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	aa e7       	ldi	r26, 0x7A	; 122
    16c0:	b4 e4       	ldi	r27, 0x44	; 68
    16c2:	80 83       	st	Z, r24
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	a2 83       	std	Z+2, r26	; 0x02
    16c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	8e 01       	movw	r16, r28
    16cc:	05 5a       	subi	r16, 0xA5	; 165
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	fe 01       	movw	r30, r28
    16d2:	e1 5a       	subi	r30, 0xA1	; 161
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	4a e7       	ldi	r20, 0x7A	; 122
    16e4:	55 e4       	ldi	r21, 0x45	; 69
    16e6:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	f8 01       	movw	r30, r16
    16f0:	80 83       	st	Z, r24
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	a2 83       	std	Z+2, r26	; 0x02
    16f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16f8:	fe 01       	movw	r30, r28
    16fa:	e5 5a       	subi	r30, 0xA5	; 165
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	60 81       	ld	r22, Z
    1700:	71 81       	ldd	r23, Z+1	; 0x01
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e8       	ldi	r20, 0x80	; 128
    170c:	5f e3       	ldi	r21, 0x3F	; 63
    170e:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    1712:	88 23       	and	r24, r24
    1714:	44 f4       	brge	.+16     	; 0x1726 <main+0xbbc>
		__ticks = 1;
    1716:	fe 01       	movw	r30, r28
    1718:	e7 5a       	subi	r30, 0xA7	; 167
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	64 c0       	rjmp	.+200    	; 0x17ee <main+0xc84>
	else if (__tmp > 65535)
    1726:	fe 01       	movw	r30, r28
    1728:	e5 5a       	subi	r30, 0xA5	; 165
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	0c f0       	brlt	.+2      	; 0x1746 <main+0xbdc>
    1744:	43 c0       	rjmp	.+134    	; 0x17cc <main+0xc62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1746:	fe 01       	movw	r30, r28
    1748:	e1 5a       	subi	r30, 0xA1	; 161
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	60 81       	ld	r22, Z
    174e:	71 81       	ldd	r23, Z+1	; 0x01
    1750:	82 81       	ldd	r24, Z+2	; 0x02
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8e 01       	movw	r16, r28
    1766:	07 5a       	subi	r16, 0xA7	; 167
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	f8 01       	movw	r30, r16
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
    177c:	1f c0       	rjmp	.+62     	; 0x17bc <main+0xc52>
    177e:	fe 01       	movw	r30, r28
    1780:	e9 5a       	subi	r30, 0xA9	; 169
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 e9       	ldi	r24, 0x90	; 144
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
    178c:	fe 01       	movw	r30, r28
    178e:	e9 5a       	subi	r30, 0xA9	; 169
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	91 81       	ldd	r25, Z+1	; 0x01
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <main+0xc2c>
    179a:	fe 01       	movw	r30, r28
    179c:	e9 5a       	subi	r30, 0xA9	; 169
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	de 01       	movw	r26, r28
    17a6:	a7 5a       	subi	r26, 0xA7	; 167
    17a8:	bf 4f       	sbci	r27, 0xFF	; 255
    17aa:	fe 01       	movw	r30, r28
    17ac:	e7 5a       	subi	r30, 0xA7	; 167
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	11 96       	adiw	r26, 0x01	; 1
    17b8:	9c 93       	st	X, r25
    17ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17bc:	fe 01       	movw	r30, r28
    17be:	e7 5a       	subi	r30, 0xA7	; 167
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	d1 f6       	brne	.-76     	; 0x177e <main+0xc14>
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <main+0xcb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17cc:	8e 01       	movw	r16, r28
    17ce:	07 5a       	subi	r16, 0xA7	; 167
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	fe 01       	movw	r30, r28
    17d4:	e5 5a       	subi	r30, 0xA5	; 165
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	f8 01       	movw	r30, r16
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	80 83       	st	Z, r24
    17ee:	de 01       	movw	r26, r28
    17f0:	ab 5a       	subi	r26, 0xAB	; 171
    17f2:	bf 4f       	sbci	r27, 0xFF	; 255
    17f4:	fe 01       	movw	r30, r28
    17f6:	e7 5a       	subi	r30, 0xA7	; 167
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	8d 93       	st	X+, r24
    1800:	9c 93       	st	X, r25
    1802:	fe 01       	movw	r30, r28
    1804:	eb 5a       	subi	r30, 0xAB	; 171
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <main+0xca2>
    1810:	fe 01       	movw	r30, r28
    1812:	eb 5a       	subi	r30, 0xAB	; 171
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	fe 01       	movw	r30, r28
    181c:	ef 5a       	subi	r30, 0xAF	; 175
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	aa e7       	ldi	r26, 0x7A	; 122
    1826:	b4 e4       	ldi	r27, 0x44	; 68
    1828:	80 83       	st	Z, r24
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	a2 83       	std	Z+2, r26	; 0x02
    182e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	8e 01       	movw	r16, r28
    1832:	03 5b       	subi	r16, 0xB3	; 179
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	fe 01       	movw	r30, r28
    1838:	ef 5a       	subi	r30, 0xAF	; 175
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a e7       	ldi	r20, 0x7A	; 122
    184a:	55 e4       	ldi	r21, 0x45	; 69
    184c:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	f8 01       	movw	r30, r16
    1856:	80 83       	st	Z, r24
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	a2 83       	std	Z+2, r26	; 0x02
    185c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    185e:	fe 01       	movw	r30, r28
    1860:	e3 5b       	subi	r30, 0xB3	; 179
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	44 f4       	brge	.+16     	; 0x188c <main+0xd22>
		__ticks = 1;
    187c:	fe 01       	movw	r30, r28
    187e:	e5 5b       	subi	r30, 0xB5	; 181
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	64 c0       	rjmp	.+200    	; 0x1954 <main+0xdea>
	else if (__tmp > 65535)
    188c:	fe 01       	movw	r30, r28
    188e:	e3 5b       	subi	r30, 0xB3	; 179
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	3f ef       	ldi	r19, 0xFF	; 255
    189e:	4f e7       	ldi	r20, 0x7F	; 127
    18a0:	57 e4       	ldi	r21, 0x47	; 71
    18a2:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    18a6:	18 16       	cp	r1, r24
    18a8:	0c f0       	brlt	.+2      	; 0x18ac <main+0xd42>
    18aa:	43 c0       	rjmp	.+134    	; 0x1932 <main+0xdc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ac:	fe 01       	movw	r30, r28
    18ae:	ef 5a       	subi	r30, 0xAF	; 175
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8e 01       	movw	r16, r28
    18cc:	05 5b       	subi	r16, 0xB5	; 181
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	bc 01       	movw	r22, r24
    18d2:	cd 01       	movw	r24, r26
    18d4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	f8 01       	movw	r30, r16
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	1f c0       	rjmp	.+62     	; 0x1922 <main+0xdb8>
    18e4:	fe 01       	movw	r30, r28
    18e6:	e7 5b       	subi	r30, 0xB7	; 183
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 e9       	ldi	r24, 0x90	; 144
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
    18f2:	fe 01       	movw	r30, r28
    18f4:	e7 5b       	subi	r30, 0xB7	; 183
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 81       	ld	r24, Z
    18fa:	91 81       	ldd	r25, Z+1	; 0x01
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <main+0xd92>
    1900:	fe 01       	movw	r30, r28
    1902:	e7 5b       	subi	r30, 0xB7	; 183
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190a:	de 01       	movw	r26, r28
    190c:	a5 5b       	subi	r26, 0xB5	; 181
    190e:	bf 4f       	sbci	r27, 0xFF	; 255
    1910:	fe 01       	movw	r30, r28
    1912:	e5 5b       	subi	r30, 0xB5	; 181
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	11 96       	adiw	r26, 0x01	; 1
    191e:	9c 93       	st	X, r25
    1920:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	fe 01       	movw	r30, r28
    1924:	e5 5b       	subi	r30, 0xB5	; 181
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	d1 f6       	brne	.-76     	; 0x18e4 <main+0xd7a>
    1930:	27 c0       	rjmp	.+78     	; 0x1980 <main+0xe16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1932:	8e 01       	movw	r16, r28
    1934:	05 5b       	subi	r16, 0xB5	; 181
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
    1938:	fe 01       	movw	r30, r28
    193a:	e3 5b       	subi	r30, 0xB3	; 179
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	f8 01       	movw	r30, r16
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
    1954:	de 01       	movw	r26, r28
    1956:	a9 5b       	subi	r26, 0xB9	; 185
    1958:	bf 4f       	sbci	r27, 0xFF	; 255
    195a:	fe 01       	movw	r30, r28
    195c:	e5 5b       	subi	r30, 0xB5	; 181
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	91 81       	ldd	r25, Z+1	; 0x01
    1964:	8d 93       	st	X+, r24
    1966:	9c 93       	st	X, r25
    1968:	fe 01       	movw	r30, r28
    196a:	e9 5b       	subi	r30, 0xB9	; 185
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	f1 f7       	brne	.-4      	; 0x1972 <main+0xe08>
    1976:	fe 01       	movw	r30, r28
    1978:	e9 5b       	subi	r30, 0xB9	; 185
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	80 83       	st	Z, r24
    1980:	fe 01       	movw	r30, r28
    1982:	ed 5b       	subi	r30, 0xBD	; 189
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	aa e7       	ldi	r26, 0x7A	; 122
    198c:	b4 e4       	ldi	r27, 0x44	; 68
    198e:	80 83       	st	Z, r24
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	a2 83       	std	Z+2, r26	; 0x02
    1994:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	8e 01       	movw	r16, r28
    1998:	01 5c       	subi	r16, 0xC1	; 193
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	fe 01       	movw	r30, r28
    199e:	ed 5b       	subi	r30, 0xBD	; 189
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a e7       	ldi	r20, 0x7A	; 122
    19b0:	55 e4       	ldi	r21, 0x45	; 69
    19b2:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	f8 01       	movw	r30, r16
    19bc:	80 83       	st	Z, r24
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	a2 83       	std	Z+2, r26	; 0x02
    19c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19c4:	fe 01       	movw	r30, r28
    19c6:	ff 96       	adiw	r30, 0x3f	; 63
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e8       	ldi	r20, 0x80	; 128
    19d6:	5f e3       	ldi	r21, 0x3F	; 63
    19d8:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    19dc:	88 23       	and	r24, r24
    19de:	2c f4       	brge	.+10     	; 0x19ea <main+0xe80>
		__ticks = 1;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9e af       	std	Y+62, r25	; 0x3e
    19e6:	8d af       	std	Y+61, r24	; 0x3d
    19e8:	46 c0       	rjmp	.+140    	; 0x1a76 <main+0xf0c>
	else if (__tmp > 65535)
    19ea:	fe 01       	movw	r30, r28
    19ec:	ff 96       	adiw	r30, 0x3f	; 63
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	64 f5       	brge	.+88     	; 0x1a5e <main+0xef4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	fe 01       	movw	r30, r28
    1a08:	ed 5b       	subi	r30, 0xBD	; 189
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9e af       	std	Y+62, r25	; 0x3e
    1a32:	8d af       	std	Y+61, r24	; 0x3d
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <main+0xeea>
    1a36:	80 e9       	ldi	r24, 0x90	; 144
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	9c af       	std	Y+60, r25	; 0x3c
    1a3c:	8b af       	std	Y+59, r24	; 0x3b
    1a3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a40:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <main+0xed8>
    1a46:	9c af       	std	Y+60, r25	; 0x3c
    1a48:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9e af       	std	Y+62, r25	; 0x3e
    1a52:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <main+0xecc>
    1a5c:	16 c0       	rjmp	.+44     	; 0x1a8a <main+0xf20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ff 96       	adiw	r30, 0x3f	; 63
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9e af       	std	Y+62, r25	; 0x3e
    1a74:	8d af       	std	Y+61, r24	; 0x3d
    1a76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a7a:	9a af       	std	Y+58, r25	; 0x3a
    1a7c:	89 af       	std	Y+57, r24	; 0x39
    1a7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <main+0xf18>
    1a86:	9a af       	std	Y+58, r25	; 0x3a
    1a88:	89 af       	std	Y+57, r24	; 0x39
                _delay_ms(1000);
                _delay_ms(1000);
                _delay_ms(1000);
                _delay_ms(1000);
            stoplicht_boot(1);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <stoplicht_boot>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	aa e7       	ldi	r26, 0x7A	; 122
    1a98:	b4 e4       	ldi	r27, 0x44	; 68
    1a9a:	8d ab       	std	Y+53, r24	; 0x35
    1a9c:	9e ab       	std	Y+54, r25	; 0x36
    1a9e:	af ab       	std	Y+55, r26	; 0x37
    1aa0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	6d a9       	ldd	r22, Y+53	; 0x35
    1aa4:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa6:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a e7       	ldi	r20, 0x7A	; 122
    1ab0:	55 e4       	ldi	r21, 0x45	; 69
    1ab2:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	89 ab       	std	Y+49, r24	; 0x31
    1abc:	9a ab       	std	Y+50, r25	; 0x32
    1abe:	ab ab       	std	Y+51, r26	; 0x33
    1ac0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ac2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <main+0xf7a>
		__ticks = 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	98 ab       	std	Y+48, r25	; 0x30
    1ae0:	8f a7       	std	Y+47, r24	; 0x2f
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <main+0xff8>
	else if (__tmp > 65535)
    1ae4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aea:	9c a9       	ldd	r25, Y+52	; 0x34
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	3f ef       	ldi	r19, 0xFF	; 255
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	57 e4       	ldi	r21, 0x47	; 71
    1af4:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	4c f5       	brge	.+82     	; 0x1b4e <main+0xfe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afc:	6d a9       	ldd	r22, Y+53	; 0x35
    1afe:	7e a9       	ldd	r23, Y+54	; 0x36
    1b00:	8f a9       	ldd	r24, Y+55	; 0x37
    1b02:	98 ad       	ldd	r25, Y+56	; 0x38
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	98 ab       	std	Y+48, r25	; 0x30
    1b22:	8f a7       	std	Y+47, r24	; 0x2f
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <main+0xfda>
    1b26:	80 e9       	ldi	r24, 0x90	; 144
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	9e a7       	std	Y+46, r25	; 0x2e
    1b2c:	8d a7       	std	Y+45, r24	; 0x2d
    1b2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b30:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <main+0xfc8>
    1b36:	9e a7       	std	Y+46, r25	; 0x2e
    1b38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	98 ab       	std	Y+48, r25	; 0x30
    1b42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b46:	98 a9       	ldd	r25, Y+48	; 0x30
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	69 f7       	brne	.-38     	; 0x1b26 <main+0xfbc>
    1b4c:	14 c0       	rjmp	.+40     	; 0x1b76 <main+0x100c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b50:	7a a9       	ldd	r23, Y+50	; 0x32
    1b52:	8b a9       	ldd	r24, Y+51	; 0x33
    1b54:	9c a9       	ldd	r25, Y+52	; 0x34
    1b56:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	98 ab       	std	Y+48, r25	; 0x30
    1b60:	8f a7       	std	Y+47, r24	; 0x2f
    1b62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b64:	98 a9       	ldd	r25, Y+48	; 0x30
    1b66:	9c a7       	std	Y+44, r25	; 0x2c
    1b68:	8b a7       	std	Y+43, r24	; 0x2b
    1b6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <main+0x1004>
    1b72:	9c a7       	std	Y+44, r25	; 0x2c
    1b74:	8b a7       	std	Y+43, r24	; 0x2b
                _delay_ms(1000);
            stoplicht_boot(0);
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <stoplicht_boot>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	aa e7       	ldi	r26, 0x7A	; 122
    1b84:	b4 e4       	ldi	r27, 0x44	; 68
    1b86:	8f a3       	std	Y+39, r24	; 0x27
    1b88:	98 a7       	std	Y+40, r25	; 0x28
    1b8a:	a9 a7       	std	Y+41, r26	; 0x29
    1b8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b90:	78 a5       	ldd	r23, Y+40	; 0x28
    1b92:	89 a5       	ldd	r24, Y+41	; 0x29
    1b94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	55 e4       	ldi	r21, 0x45	; 69
    1b9e:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8b a3       	std	Y+35, r24	; 0x23
    1ba8:	9c a3       	std	Y+36, r25	; 0x24
    1baa:	ad a3       	std	Y+37, r26	; 0x25
    1bac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bae:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <main+0x1066>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9a a3       	std	Y+34, r25	; 0x22
    1bcc:	89 a3       	std	Y+33, r24	; 0x21
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <main+0x10e4>
	else if (__tmp > 65535)
    1bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <main+0x10d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bea:	78 a5       	ldd	r23, Y+40	; 0x28
    1bec:	89 a5       	ldd	r24, Y+41	; 0x29
    1bee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9a a3       	std	Y+34, r25	; 0x22
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <main+0x10c6>
    1c12:	80 e9       	ldi	r24, 0x90	; 144
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	98 a3       	std	Y+32, r25	; 0x20
    1c18:	8f 8f       	std	Y+31, r24	; 0x1f
    1c1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <main+0x10b4>
    1c22:	98 a3       	std	Y+32, r25	; 0x20
    1c24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	89 a1       	ldd	r24, Y+33	; 0x21
    1c28:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9a a3       	std	Y+34, r25	; 0x22
    1c2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	89 a1       	ldd	r24, Y+33	; 0x21
    1c32:	9a a1       	ldd	r25, Y+34	; 0x22
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <main+0x10a8>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <main+0x10f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c40:	9e a1       	ldd	r25, Y+38	; 0x26
    1c42:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9a a3       	std	Y+34, r25	; 0x22
    1c4c:	89 a3       	std	Y+33, r24	; 0x21
    1c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c50:	9a a1       	ldd	r25, Y+34	; 0x22
    1c52:	9e 8f       	std	Y+30, r25	; 0x1e
    1c54:	8d 8f       	std	Y+29, r24	; 0x1d
    1c56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <main+0x10f0>
    1c5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c60:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(1000);
            statusled(1);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 7e 03 	call	0x6fc	; 0x6fc <statusled>
            brugdek(0);
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 46 01 	call	0x28c	; 0x28c <brugdek>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	aa e7       	ldi	r26, 0x7A	; 122
    1c78:	b4 e4       	ldi	r27, 0x44	; 68
    1c7a:	89 8f       	std	Y+25, r24	; 0x19
    1c7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	69 8d       	ldd	r22, Y+25	; 0x19
    1c84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4a e7       	ldi	r20, 0x7A	; 122
    1c90:	55 e4       	ldi	r21, 0x45	; 69
    1c92:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8d 8b       	std	Y+21, r24	; 0x15
    1c9c:	9e 8b       	std	Y+22, r25	; 0x16
    1c9e:	af 8b       	std	Y+23, r26	; 0x17
    1ca0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <main+0x115a>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
    1cc2:	3f c0       	rjmp	.+126    	; 0x1d42 <main+0x11d8>
	else if (__tmp > 65535)
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	57 e4       	ldi	r21, 0x47	; 71
    1cd4:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	4c f5       	brge	.+82     	; 0x1d2e <main+0x11c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e2       	ldi	r20, 0x20	; 32
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9c 8b       	std	Y+20, r25	; 0x14
    1d02:	8b 8b       	std	Y+19, r24	; 0x13
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <main+0x11ba>
    1d06:	80 e9       	ldi	r24, 0x90	; 144
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	9a 8b       	std	Y+18, r25	; 0x12
    1d0c:	89 8b       	std	Y+17, r24	; 0x11
    1d0e:	89 89       	ldd	r24, Y+17	; 0x11
    1d10:	9a 89       	ldd	r25, Y+18	; 0x12
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <main+0x11a8>
    1d16:	9a 8b       	std	Y+18, r25	; 0x12
    1d18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	9c 8b       	std	Y+20, r25	; 0x14
    1d22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <main+0x119c>
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <main+0x11ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d30:	7e 89       	ldd	r23, Y+22	; 0x16
    1d32:	8f 89       	ldd	r24, Y+23	; 0x17
    1d34:	98 8d       	ldd	r25, Y+24	; 0x18
    1d36:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	98 8b       	std	Y+16, r25	; 0x10
    1d48:	8f 87       	std	Y+15, r24	; 0x0f
    1d4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4c:	98 89       	ldd	r25, Y+16	; 0x10
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <main+0x11e4>
    1d52:	98 8b       	std	Y+16, r25	; 0x10
    1d54:	8f 87       	std	Y+15, r24	; 0x0f

                _delay_ms(1000);
            slagboom(0);
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 56 04 	call	0x8ac	; 0x8ac <slagboom>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	aa e7       	ldi	r26, 0x7A	; 122
    1d64:	b4 e4       	ldi	r27, 0x44	; 68
    1d66:	8b 87       	std	Y+11, r24	; 0x0b
    1d68:	9c 87       	std	Y+12, r25	; 0x0c
    1d6a:	ad 87       	std	Y+13, r26	; 0x0d
    1d6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	4a e7       	ldi	r20, 0x7A	; 122
    1d7c:	55 e4       	ldi	r21, 0x45	; 69
    1d7e:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	8f 83       	std	Y+7, r24	; 0x07
    1d88:	98 87       	std	Y+8, r25	; 0x08
    1d8a:	a9 87       	std	Y+9, r26	; 0x09
    1d8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e8       	ldi	r20, 0x80	; 128
    1d9c:	5f e3       	ldi	r21, 0x3F	; 63
    1d9e:	0e 94 8d 13 	call	0x271a	; 0x271a <__ltsf2>
    1da2:	88 23       	and	r24, r24
    1da4:	2c f4       	brge	.+10     	; 0x1db0 <main+0x1246>
		__ticks = 1;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	3f c0       	rjmp	.+126    	; 0x1e2e <main+0x12c4>
	else if (__tmp > 65535)
    1db0:	6f 81       	ldd	r22, Y+7	; 0x07
    1db2:	78 85       	ldd	r23, Y+8	; 0x08
    1db4:	89 85       	ldd	r24, Y+9	; 0x09
    1db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	3f ef       	ldi	r19, 0xFF	; 255
    1dbc:	4f e7       	ldi	r20, 0x7F	; 127
    1dbe:	57 e4       	ldi	r21, 0x47	; 71
    1dc0:	0e 94 2d 13 	call	0x265a	; 0x265a <__gtsf2>
    1dc4:	18 16       	cp	r1, r24
    1dc6:	4c f5       	brge	.+82     	; 0x1e1a <main+0x12b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e2       	ldi	r20, 0x20	; 32
    1dd6:	51 e4       	ldi	r21, 0x41	; 65
    1dd8:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	0f c0       	rjmp	.+30     	; 0x1e10 <main+0x12a6>
    1df2:	80 e9       	ldi	r24, 0x90	; 144
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	9c 83       	std	Y+4, r25	; 0x04
    1df8:	8b 83       	std	Y+3, r24	; 0x03
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <main+0x1294>
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	69 f7       	brne	.-38     	; 0x1df2 <main+0x1288>
    1e18:	14 c0       	rjmp	.+40     	; 0x1e42 <main+0x12d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1c:	78 85       	ldd	r23, Y+8	; 0x08
    1e1e:	89 85       	ldd	r24, Y+9	; 0x09
    1e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e22:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <main+0x12d0>
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(1000);
            statusled(0);
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 7e 03 	call	0x6fc	; 0x6fc <statusled>
            warnlicht(0);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 ca 03 	call	0x794	; 0x794 <warnlicht>
            stoplicht_boot(3);
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <stoplicht_boot>
    1e5a:	94 c9       	rjmp	.-3288   	; 0x1184 <main+0x61a>

00001e5c <__vector_20>:
#define RESET_VALUE	(65636ul-TIME_VALUE)
#define STOP_VALUE	(TIME_VALUE*0.075)
#define RANGE		(RESET_VALUE*0.025)

ISR(TIMER1_OVF_vect)
{
    1e5c:	1f 92       	push	r1
    1e5e:	0f 92       	push	r0
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	0f 92       	push	r0
    1e64:	00 90 5b 00 	lds	r0, 0x005B
    1e68:	0f 92       	push	r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	8f 93       	push	r24
    1e6e:	9f 93       	push	r25
    1e70:	af 93       	push	r26
    1e72:	bf 93       	push	r27
    1e74:	ef 93       	push	r30
    1e76:	ff 93       	push	r31
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = RESET_VALUE;
    1e80:	e4 e8       	ldi	r30, 0x84	; 132
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	84 e2       	ldi	r24, 0x24	; 36
    1e86:	94 e6       	ldi	r25, 0x64	; 100
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24

	PORT_1 |= (1<<PIN_1);
    1e8c:	a5 e2       	ldi	r26, 0x25	; 37
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e5 e2       	ldi	r30, 0x25	; 37
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 61       	ori	r24, 0x10	; 16
    1e98:	8c 93       	st	X, r24
	PORT_2 |= (1<<PIN_2);
    1e9a:	a5 e2       	ldi	r26, 0x25	; 37
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e2       	ldi	r30, 0x25	; 37
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 62       	ori	r24, 0x20	; 32
    1ea6:	8c 93       	st	X, r24
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	ff 91       	pop	r31
    1eae:	ef 91       	pop	r30
    1eb0:	bf 91       	pop	r27
    1eb2:	af 91       	pop	r26
    1eb4:	9f 91       	pop	r25
    1eb6:	8f 91       	pop	r24
    1eb8:	0f 90       	pop	r0
    1eba:	00 92 5b 00 	sts	0x005B, r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    1ec8:	1f 92       	push	r1
    1eca:	0f 92       	push	r0
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	0f 92       	push	r0
    1ed0:	00 90 5b 00 	lds	r0, 0x005B
    1ed4:	0f 92       	push	r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	8f 93       	push	r24
    1eda:	af 93       	push	r26
    1edc:	bf 93       	push	r27
    1ede:	ef 93       	push	r30
    1ee0:	ff 93       	push	r31
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
	PORT_1 &= ~(1<<PIN_1);
    1eea:	a5 e2       	ldi	r26, 0x25	; 37
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e5 e2       	ldi	r30, 0x25	; 37
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8f 7e       	andi	r24, 0xEF	; 239
    1ef6:	8c 93       	st	X, r24
}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	8f 91       	pop	r24
    1f06:	0f 90       	pop	r0
    1f08:	00 92 5b 00 	sts	0x005B, r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	0f 90       	pop	r0
    1f12:	1f 90       	pop	r1
    1f14:	18 95       	reti

00001f16 <__vector_18>:

ISR(TIMER1_COMPB_vect)
{
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	00 90 5b 00 	lds	r0, 0x005B
    1f22:	0f 92       	push	r0
    1f24:	11 24       	eor	r1, r1
    1f26:	8f 93       	push	r24
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
	PORT_2 &= ~(1<<PIN_2);
    1f38:	a5 e2       	ldi	r26, 0x25	; 37
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e5 e2       	ldi	r30, 0x25	; 37
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8f 7d       	andi	r24, 0xDF	; 223
    1f44:	8c 93       	st	X, r24
}
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	8f 91       	pop	r24
    1f54:	0f 90       	pop	r0
    1f56:	00 92 5b 00 	sts	0x005B, r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	0f 90       	pop	r0
    1f60:	1f 90       	pop	r1
    1f62:	18 95       	reti

00001f64 <init_servo>:

void init_servo(void)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
	// Config pins as output
	DDR_1 |= (1<<PIN_1);
    1f6c:	a4 e2       	ldi	r26, 0x24	; 36
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e4 e2       	ldi	r30, 0x24	; 36
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	80 61       	ori	r24, 0x10	; 16
    1f78:	8c 93       	st	X, r24
	DDR_2 |= (1<<PIN_2);
    1f7a:	a4 e2       	ldi	r26, 0x24	; 36
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e4 e2       	ldi	r30, 0x24	; 36
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	80 62       	ori	r24, 0x20	; 32
    1f86:	8c 93       	st	X, r24

	// Use mode 0, clkdiv = 8
	TCCR1A = 0;
    1f88:	e0 e8       	ldi	r30, 0x80	; 128
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	10 82       	st	Z, r1
	TCCR1B = (0<<CS12) | (1<<CS11) | (0<<CS10);
    1f8e:	e1 e8       	ldi	r30, 0x81	; 129
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	80 83       	st	Z, r24
	// Interrupts on OCA, OCB and OVF
	TIMSK1 = (1<<OCIE1B) | (1<<OCIE1A) | (1<<TOIE1);
    1f96:	ef e6       	ldi	r30, 0x6F	; 111
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	87 e0       	ldi	r24, 0x07	; 7
    1f9c:	80 83       	st	Z, r24

	TCNT1 = RESET_VALUE;
    1f9e:	e4 e8       	ldi	r30, 0x84	; 132
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	84 e2       	ldi	r24, 0x24	; 36
    1fa4:	94 e6       	ldi	r25, 0x64	; 100
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24

	servo1_set_percentage(0);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <servo1_set_percentage>
	servo2_set_percentage(0);
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	0e 94 1e 10 	call	0x203c	; 0x203c <servo2_set_percentage>

	sei();
    1fb6:	78 94       	sei
}
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <servo1_set_percentage>:

void servo1_set_percentage(signed char percentage)
{
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	if (percentage >= -100 && percentage <= 100)
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	8c 39       	cpi	r24, 0x9C	; 156
    1fd2:	74 f1       	brlt	.+92     	; 0x2030 <servo1_set_percentage+0x72>
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	85 36       	cpi	r24, 0x65	; 101
    1fd8:	5c f5       	brge	.+86     	; 0x2030 <servo1_set_percentage+0x72>
	{
		OCR1A = RESET_VALUE+STOP_VALUE+(RANGE/100*percentage);
    1fda:	08 e8       	ldi	r16, 0x88	; 136
    1fdc:	10 e0       	ldi	r17, 0x00	; 0
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	99 27       	eor	r25, r25
    1fe2:	87 fd       	sbrc	r24, 7
    1fe4:	90 95       	com	r25
    1fe6:	a9 2f       	mov	r26, r25
    1fe8:	b9 2f       	mov	r27, r25
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 bd 13 	call	0x277a	; 0x277a <__floatsisf>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	28 e8       	ldi	r18, 0x88	; 136
    1ffc:	36 e1       	ldi	r19, 0x16	; 22
    1ffe:	4d ec       	ldi	r20, 0xCD	; 205
    2000:	50 e4       	ldi	r21, 0x40	; 64
    2002:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	38 eb       	ldi	r19, 0xB8	; 184
    2012:	4f ed       	ldi	r20, 0xDF	; 223
    2014:	56 e4       	ldi	r21, 0x46	; 70
    2016:	0e 94 06 12 	call	0x240c	; 0x240c <__addsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	f8 01       	movw	r30, r16
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	80 83       	st	Z, r24
	}
}
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	08 95       	ret

0000203c <servo2_set_percentage>:

void servo2_set_percentage(signed char percentage)
{
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	89 83       	std	Y+1, r24	; 0x01
	if (percentage >= -100 && percentage <= 100)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	8c 39       	cpi	r24, 0x9C	; 156
    2050:	74 f1       	brlt	.+92     	; 0x20ae <servo2_set_percentage+0x72>
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	85 36       	cpi	r24, 0x65	; 101
    2056:	5c f5       	brge	.+86     	; 0x20ae <servo2_set_percentage+0x72>
	{
		OCR1B = RESET_VALUE+STOP_VALUE+(RANGE/100*percentage);
    2058:	0a e8       	ldi	r16, 0x8A	; 138
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	99 27       	eor	r25, r25
    2060:	87 fd       	sbrc	r24, 7
    2062:	90 95       	com	r25
    2064:	a9 2f       	mov	r26, r25
    2066:	b9 2f       	mov	r27, r25
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 bd 13 	call	0x277a	; 0x277a <__floatsisf>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	28 e8       	ldi	r18, 0x88	; 136
    207a:	36 e1       	ldi	r19, 0x16	; 22
    207c:	4d ec       	ldi	r20, 0xCD	; 205
    207e:	50 e4       	ldi	r21, 0x40	; 64
    2080:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	38 eb       	ldi	r19, 0xB8	; 184
    2090:	4f ed       	ldi	r20, 0xDF	; 223
    2092:	56 e4       	ldi	r21, 0x46	; 70
    2094:	0e 94 06 12 	call	0x240c	; 0x240c <__addsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	f8 01       	movw	r30, r16
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
	}
}
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	08 95       	ret

000020ba <__fixunssfsi>:
    20ba:	ef 92       	push	r14
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	7b 01       	movw	r14, r22
    20c4:	8c 01       	movw	r16, r24
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	5f e4       	ldi	r21, 0x4F	; 79
    20ce:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__gesf2>
    20d2:	88 23       	and	r24, r24
    20d4:	8c f0       	brlt	.+34     	; 0x20f8 <__fixunssfsi+0x3e>
    20d6:	c8 01       	movw	r24, r16
    20d8:	b7 01       	movw	r22, r14
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	5f e4       	ldi	r21, 0x4F	; 79
    20e2:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__subsf3>
    20e6:	0e 94 1b 14 	call	0x2836	; 0x2836 <__fixsfsi>
    20ea:	9b 01       	movw	r18, r22
    20ec:	ac 01       	movw	r20, r24
    20ee:	20 50       	subi	r18, 0x00	; 0
    20f0:	30 40       	sbci	r19, 0x00	; 0
    20f2:	40 40       	sbci	r20, 0x00	; 0
    20f4:	50 48       	sbci	r21, 0x80	; 128
    20f6:	06 c0       	rjmp	.+12     	; 0x2104 <__fixunssfsi+0x4a>
    20f8:	c8 01       	movw	r24, r16
    20fa:	b7 01       	movw	r22, r14
    20fc:	0e 94 1b 14 	call	0x2836	; 0x2836 <__fixsfsi>
    2100:	9b 01       	movw	r18, r22
    2102:	ac 01       	movw	r20, r24
    2104:	b9 01       	movw	r22, r18
    2106:	ca 01       	movw	r24, r20
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	ff 90       	pop	r15
    210e:	ef 90       	pop	r14
    2110:	08 95       	ret

00002112 <_fpadd_parts>:
    2112:	a0 e0       	ldi	r26, 0x00	; 0
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ef e8       	ldi	r30, 0x8F	; 143
    2118:	f0 e1       	ldi	r31, 0x10	; 16
    211a:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__prologue_saves__>
    211e:	dc 01       	movw	r26, r24
    2120:	2b 01       	movw	r4, r22
    2122:	fa 01       	movw	r30, r20
    2124:	9c 91       	ld	r25, X
    2126:	92 30       	cpi	r25, 0x02	; 2
    2128:	08 f4       	brcc	.+2      	; 0x212c <_fpadd_parts+0x1a>
    212a:	39 c1       	rjmp	.+626    	; 0x239e <__stack+0x19f>
    212c:	eb 01       	movw	r28, r22
    212e:	88 81       	ld	r24, Y
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	08 f4       	brcc	.+2      	; 0x2136 <_fpadd_parts+0x24>
    2134:	33 c1       	rjmp	.+614    	; 0x239c <__stack+0x19d>
    2136:	94 30       	cpi	r25, 0x04	; 4
    2138:	69 f4       	brne	.+26     	; 0x2154 <_fpadd_parts+0x42>
    213a:	84 30       	cpi	r24, 0x04	; 4
    213c:	09 f0       	breq	.+2      	; 0x2140 <_fpadd_parts+0x2e>
    213e:	2f c1       	rjmp	.+606    	; 0x239e <__stack+0x19f>
    2140:	11 96       	adiw	r26, 0x01	; 1
    2142:	9c 91       	ld	r25, X
    2144:	11 97       	sbiw	r26, 0x01	; 1
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	98 17       	cp	r25, r24
    214a:	09 f4       	brne	.+2      	; 0x214e <_fpadd_parts+0x3c>
    214c:	28 c1       	rjmp	.+592    	; 0x239e <__stack+0x19f>
    214e:	a0 e0       	ldi	r26, 0x00	; 0
    2150:	b2 e0       	ldi	r27, 0x02	; 2
    2152:	25 c1       	rjmp	.+586    	; 0x239e <__stack+0x19f>
    2154:	84 30       	cpi	r24, 0x04	; 4
    2156:	09 f4       	brne	.+2      	; 0x215a <_fpadd_parts+0x48>
    2158:	21 c1       	rjmp	.+578    	; 0x239c <__stack+0x19d>
    215a:	82 30       	cpi	r24, 0x02	; 2
    215c:	a9 f4       	brne	.+42     	; 0x2188 <_fpadd_parts+0x76>
    215e:	92 30       	cpi	r25, 0x02	; 2
    2160:	09 f0       	breq	.+2      	; 0x2164 <_fpadd_parts+0x52>
    2162:	1d c1       	rjmp	.+570    	; 0x239e <__stack+0x19f>
    2164:	9a 01       	movw	r18, r20
    2166:	ad 01       	movw	r20, r26
    2168:	88 e0       	ldi	r24, 0x08	; 8
    216a:	ea 01       	movw	r28, r20
    216c:	09 90       	ld	r0, Y+
    216e:	ae 01       	movw	r20, r28
    2170:	e9 01       	movw	r28, r18
    2172:	09 92       	st	Y+, r0
    2174:	9e 01       	movw	r18, r28
    2176:	81 50       	subi	r24, 0x01	; 1
    2178:	c1 f7       	brne	.-16     	; 0x216a <_fpadd_parts+0x58>
    217a:	e2 01       	movw	r28, r4
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	11 96       	adiw	r26, 0x01	; 1
    2180:	9c 91       	ld	r25, X
    2182:	89 23       	and	r24, r25
    2184:	81 83       	std	Z+1, r24	; 0x01
    2186:	08 c1       	rjmp	.+528    	; 0x2398 <__stack+0x199>
    2188:	92 30       	cpi	r25, 0x02	; 2
    218a:	09 f4       	brne	.+2      	; 0x218e <_fpadd_parts+0x7c>
    218c:	07 c1       	rjmp	.+526    	; 0x239c <__stack+0x19d>
    218e:	12 96       	adiw	r26, 0x02	; 2
    2190:	2d 90       	ld	r2, X+
    2192:	3c 90       	ld	r3, X
    2194:	13 97       	sbiw	r26, 0x03	; 3
    2196:	eb 01       	movw	r28, r22
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	9b 81       	ldd	r25, Y+3	; 0x03
    219c:	14 96       	adiw	r26, 0x04	; 4
    219e:	ad 90       	ld	r10, X+
    21a0:	bd 90       	ld	r11, X+
    21a2:	cd 90       	ld	r12, X+
    21a4:	dc 90       	ld	r13, X
    21a6:	17 97       	sbiw	r26, 0x07	; 7
    21a8:	ec 80       	ldd	r14, Y+4	; 0x04
    21aa:	fd 80       	ldd	r15, Y+5	; 0x05
    21ac:	0e 81       	ldd	r16, Y+6	; 0x06
    21ae:	1f 81       	ldd	r17, Y+7	; 0x07
    21b0:	91 01       	movw	r18, r2
    21b2:	28 1b       	sub	r18, r24
    21b4:	39 0b       	sbc	r19, r25
    21b6:	b9 01       	movw	r22, r18
    21b8:	37 ff       	sbrs	r19, 7
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <_fpadd_parts+0xb2>
    21bc:	66 27       	eor	r22, r22
    21be:	77 27       	eor	r23, r23
    21c0:	62 1b       	sub	r22, r18
    21c2:	73 0b       	sbc	r23, r19
    21c4:	60 32       	cpi	r22, 0x20	; 32
    21c6:	71 05       	cpc	r23, r1
    21c8:	0c f0       	brlt	.+2      	; 0x21cc <_fpadd_parts+0xba>
    21ca:	61 c0       	rjmp	.+194    	; 0x228e <__stack+0x8f>
    21cc:	12 16       	cp	r1, r18
    21ce:	13 06       	cpc	r1, r19
    21d0:	6c f5       	brge	.+90     	; 0x222c <__stack+0x2d>
    21d2:	37 01       	movw	r6, r14
    21d4:	48 01       	movw	r8, r16
    21d6:	06 2e       	mov	r0, r22
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <_fpadd_parts+0xd0>
    21da:	96 94       	lsr	r9
    21dc:	87 94       	ror	r8
    21de:	77 94       	ror	r7
    21e0:	67 94       	ror	r6
    21e2:	0a 94       	dec	r0
    21e4:	d2 f7       	brpl	.-12     	; 0x21da <_fpadd_parts+0xc8>
    21e6:	21 e0       	ldi	r18, 0x01	; 1
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	04 c0       	rjmp	.+8      	; 0x21f8 <_fpadd_parts+0xe6>
    21f0:	22 0f       	add	r18, r18
    21f2:	33 1f       	adc	r19, r19
    21f4:	44 1f       	adc	r20, r20
    21f6:	55 1f       	adc	r21, r21
    21f8:	6a 95       	dec	r22
    21fa:	d2 f7       	brpl	.-12     	; 0x21f0 <_fpadd_parts+0xde>
    21fc:	21 50       	subi	r18, 0x01	; 1
    21fe:	30 40       	sbci	r19, 0x00	; 0
    2200:	40 40       	sbci	r20, 0x00	; 0
    2202:	50 40       	sbci	r21, 0x00	; 0
    2204:	2e 21       	and	r18, r14
    2206:	3f 21       	and	r19, r15
    2208:	40 23       	and	r20, r16
    220a:	51 23       	and	r21, r17
    220c:	21 15       	cp	r18, r1
    220e:	31 05       	cpc	r19, r1
    2210:	41 05       	cpc	r20, r1
    2212:	51 05       	cpc	r21, r1
    2214:	21 f0       	breq	.+8      	; 0x221e <__stack+0x1f>
    2216:	21 e0       	ldi	r18, 0x01	; 1
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	79 01       	movw	r14, r18
    2220:	8a 01       	movw	r16, r20
    2222:	e6 28       	or	r14, r6
    2224:	f7 28       	or	r15, r7
    2226:	08 29       	or	r16, r8
    2228:	19 29       	or	r17, r9
    222a:	3c c0       	rjmp	.+120    	; 0x22a4 <__stack+0xa5>
    222c:	23 2b       	or	r18, r19
    222e:	d1 f1       	breq	.+116    	; 0x22a4 <__stack+0xa5>
    2230:	26 0e       	add	r2, r22
    2232:	37 1e       	adc	r3, r23
    2234:	35 01       	movw	r6, r10
    2236:	46 01       	movw	r8, r12
    2238:	06 2e       	mov	r0, r22
    223a:	04 c0       	rjmp	.+8      	; 0x2244 <__stack+0x45>
    223c:	96 94       	lsr	r9
    223e:	87 94       	ror	r8
    2240:	77 94       	ror	r7
    2242:	67 94       	ror	r6
    2244:	0a 94       	dec	r0
    2246:	d2 f7       	brpl	.-12     	; 0x223c <__stack+0x3d>
    2248:	21 e0       	ldi	r18, 0x01	; 1
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	04 c0       	rjmp	.+8      	; 0x225a <__stack+0x5b>
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	44 1f       	adc	r20, r20
    2258:	55 1f       	adc	r21, r21
    225a:	6a 95       	dec	r22
    225c:	d2 f7       	brpl	.-12     	; 0x2252 <__stack+0x53>
    225e:	21 50       	subi	r18, 0x01	; 1
    2260:	30 40       	sbci	r19, 0x00	; 0
    2262:	40 40       	sbci	r20, 0x00	; 0
    2264:	50 40       	sbci	r21, 0x00	; 0
    2266:	2a 21       	and	r18, r10
    2268:	3b 21       	and	r19, r11
    226a:	4c 21       	and	r20, r12
    226c:	5d 21       	and	r21, r13
    226e:	21 15       	cp	r18, r1
    2270:	31 05       	cpc	r19, r1
    2272:	41 05       	cpc	r20, r1
    2274:	51 05       	cpc	r21, r1
    2276:	21 f0       	breq	.+8      	; 0x2280 <__stack+0x81>
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	59 01       	movw	r10, r18
    2282:	6a 01       	movw	r12, r20
    2284:	a6 28       	or	r10, r6
    2286:	b7 28       	or	r11, r7
    2288:	c8 28       	or	r12, r8
    228a:	d9 28       	or	r13, r9
    228c:	0b c0       	rjmp	.+22     	; 0x22a4 <__stack+0xa5>
    228e:	82 15       	cp	r24, r2
    2290:	93 05       	cpc	r25, r3
    2292:	2c f0       	brlt	.+10     	; 0x229e <__stack+0x9f>
    2294:	1c 01       	movw	r2, r24
    2296:	aa 24       	eor	r10, r10
    2298:	bb 24       	eor	r11, r11
    229a:	65 01       	movw	r12, r10
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <__stack+0xa5>
    229e:	ee 24       	eor	r14, r14
    22a0:	ff 24       	eor	r15, r15
    22a2:	87 01       	movw	r16, r14
    22a4:	11 96       	adiw	r26, 0x01	; 1
    22a6:	9c 91       	ld	r25, X
    22a8:	d2 01       	movw	r26, r4
    22aa:	11 96       	adiw	r26, 0x01	; 1
    22ac:	8c 91       	ld	r24, X
    22ae:	98 17       	cp	r25, r24
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <__stack+0xb5>
    22b2:	45 c0       	rjmp	.+138    	; 0x233e <__stack+0x13f>
    22b4:	99 23       	and	r25, r25
    22b6:	39 f0       	breq	.+14     	; 0x22c6 <__stack+0xc7>
    22b8:	a8 01       	movw	r20, r16
    22ba:	97 01       	movw	r18, r14
    22bc:	2a 19       	sub	r18, r10
    22be:	3b 09       	sbc	r19, r11
    22c0:	4c 09       	sbc	r20, r12
    22c2:	5d 09       	sbc	r21, r13
    22c4:	06 c0       	rjmp	.+12     	; 0x22d2 <__stack+0xd3>
    22c6:	a6 01       	movw	r20, r12
    22c8:	95 01       	movw	r18, r10
    22ca:	2e 19       	sub	r18, r14
    22cc:	3f 09       	sbc	r19, r15
    22ce:	40 0b       	sbc	r20, r16
    22d0:	51 0b       	sbc	r21, r17
    22d2:	57 fd       	sbrc	r21, 7
    22d4:	08 c0       	rjmp	.+16     	; 0x22e6 <__stack+0xe7>
    22d6:	11 82       	std	Z+1, r1	; 0x01
    22d8:	33 82       	std	Z+3, r3	; 0x03
    22da:	22 82       	std	Z+2, r2	; 0x02
    22dc:	24 83       	std	Z+4, r18	; 0x04
    22de:	35 83       	std	Z+5, r19	; 0x05
    22e0:	46 83       	std	Z+6, r20	; 0x06
    22e2:	57 83       	std	Z+7, r21	; 0x07
    22e4:	1d c0       	rjmp	.+58     	; 0x2320 <__stack+0x121>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	81 83       	std	Z+1, r24	; 0x01
    22ea:	33 82       	std	Z+3, r3	; 0x03
    22ec:	22 82       	std	Z+2, r2	; 0x02
    22ee:	88 27       	eor	r24, r24
    22f0:	99 27       	eor	r25, r25
    22f2:	dc 01       	movw	r26, r24
    22f4:	82 1b       	sub	r24, r18
    22f6:	93 0b       	sbc	r25, r19
    22f8:	a4 0b       	sbc	r26, r20
    22fa:	b5 0b       	sbc	r27, r21
    22fc:	84 83       	std	Z+4, r24	; 0x04
    22fe:	95 83       	std	Z+5, r25	; 0x05
    2300:	a6 83       	std	Z+6, r26	; 0x06
    2302:	b7 83       	std	Z+7, r27	; 0x07
    2304:	0d c0       	rjmp	.+26     	; 0x2320 <__stack+0x121>
    2306:	22 0f       	add	r18, r18
    2308:	33 1f       	adc	r19, r19
    230a:	44 1f       	adc	r20, r20
    230c:	55 1f       	adc	r21, r21
    230e:	24 83       	std	Z+4, r18	; 0x04
    2310:	35 83       	std	Z+5, r19	; 0x05
    2312:	46 83       	std	Z+6, r20	; 0x06
    2314:	57 83       	std	Z+7, r21	; 0x07
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	93 83       	std	Z+3, r25	; 0x03
    231e:	82 83       	std	Z+2, r24	; 0x02
    2320:	24 81       	ldd	r18, Z+4	; 0x04
    2322:	35 81       	ldd	r19, Z+5	; 0x05
    2324:	46 81       	ldd	r20, Z+6	; 0x06
    2326:	57 81       	ldd	r21, Z+7	; 0x07
    2328:	da 01       	movw	r26, r20
    232a:	c9 01       	movw	r24, r18
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	a1 09       	sbc	r26, r1
    2330:	b1 09       	sbc	r27, r1
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	9f 4f       	sbci	r25, 0xFF	; 255
    2336:	af 4f       	sbci	r26, 0xFF	; 255
    2338:	bf 43       	sbci	r27, 0x3F	; 63
    233a:	28 f3       	brcs	.-54     	; 0x2306 <__stack+0x107>
    233c:	0b c0       	rjmp	.+22     	; 0x2354 <__stack+0x155>
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	33 82       	std	Z+3, r3	; 0x03
    2342:	22 82       	std	Z+2, r2	; 0x02
    2344:	ea 0c       	add	r14, r10
    2346:	fb 1c       	adc	r15, r11
    2348:	0c 1d       	adc	r16, r12
    234a:	1d 1d       	adc	r17, r13
    234c:	e4 82       	std	Z+4, r14	; 0x04
    234e:	f5 82       	std	Z+5, r15	; 0x05
    2350:	06 83       	std	Z+6, r16	; 0x06
    2352:	17 83       	std	Z+7, r17	; 0x07
    2354:	83 e0       	ldi	r24, 0x03	; 3
    2356:	80 83       	st	Z, r24
    2358:	24 81       	ldd	r18, Z+4	; 0x04
    235a:	35 81       	ldd	r19, Z+5	; 0x05
    235c:	46 81       	ldd	r20, Z+6	; 0x06
    235e:	57 81       	ldd	r21, Z+7	; 0x07
    2360:	57 ff       	sbrs	r21, 7
    2362:	1a c0       	rjmp	.+52     	; 0x2398 <__stack+0x199>
    2364:	c9 01       	movw	r24, r18
    2366:	aa 27       	eor	r26, r26
    2368:	97 fd       	sbrc	r25, 7
    236a:	a0 95       	com	r26
    236c:	ba 2f       	mov	r27, r26
    236e:	81 70       	andi	r24, 0x01	; 1
    2370:	90 70       	andi	r25, 0x00	; 0
    2372:	a0 70       	andi	r26, 0x00	; 0
    2374:	b0 70       	andi	r27, 0x00	; 0
    2376:	56 95       	lsr	r21
    2378:	47 95       	ror	r20
    237a:	37 95       	ror	r19
    237c:	27 95       	ror	r18
    237e:	82 2b       	or	r24, r18
    2380:	93 2b       	or	r25, r19
    2382:	a4 2b       	or	r26, r20
    2384:	b5 2b       	or	r27, r21
    2386:	84 83       	std	Z+4, r24	; 0x04
    2388:	95 83       	std	Z+5, r25	; 0x05
    238a:	a6 83       	std	Z+6, r26	; 0x06
    238c:	b7 83       	std	Z+7, r27	; 0x07
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	93 83       	std	Z+3, r25	; 0x03
    2396:	82 83       	std	Z+2, r24	; 0x02
    2398:	df 01       	movw	r26, r30
    239a:	01 c0       	rjmp	.+2      	; 0x239e <__stack+0x19f>
    239c:	d2 01       	movw	r26, r4
    239e:	cd 01       	movw	r24, r26
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	e2 e1       	ldi	r30, 0x12	; 18
    23a6:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__epilogue_restores__>

000023aa <__subsf3>:
    23aa:	a0 e2       	ldi	r26, 0x20	; 32
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	eb ed       	ldi	r30, 0xDB	; 219
    23b0:	f1 e1       	ldi	r31, 0x11	; 17
    23b2:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
    23b6:	69 83       	std	Y+1, r22	; 0x01
    23b8:	7a 83       	std	Y+2, r23	; 0x02
    23ba:	8b 83       	std	Y+3, r24	; 0x03
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	2d 83       	std	Y+5, r18	; 0x05
    23c0:	3e 83       	std	Y+6, r19	; 0x06
    23c2:	4f 83       	std	Y+7, r20	; 0x07
    23c4:	58 87       	std	Y+8, r21	; 0x08
    23c6:	e9 e0       	ldi	r30, 0x09	; 9
    23c8:	ee 2e       	mov	r14, r30
    23ca:	f1 2c       	mov	r15, r1
    23cc:	ec 0e       	add	r14, r28
    23ce:	fd 1e       	adc	r15, r29
    23d0:	ce 01       	movw	r24, r28
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	b7 01       	movw	r22, r14
    23d6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    23da:	8e 01       	movw	r16, r28
    23dc:	0f 5e       	subi	r16, 0xEF	; 239
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	ce 01       	movw	r24, r28
    23e2:	05 96       	adiw	r24, 0x05	; 5
    23e4:	b8 01       	movw	r22, r16
    23e6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    23ea:	8a 89       	ldd	r24, Y+18	; 0x12
    23ec:	91 e0       	ldi	r25, 0x01	; 1
    23ee:	89 27       	eor	r24, r25
    23f0:	8a 8b       	std	Y+18, r24	; 0x12
    23f2:	c7 01       	movw	r24, r14
    23f4:	b8 01       	movw	r22, r16
    23f6:	ae 01       	movw	r20, r28
    23f8:	47 5e       	subi	r20, 0xE7	; 231
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
    23fc:	0e 94 89 10 	call	0x2112	; 0x2112 <_fpadd_parts>
    2400:	0e 94 be 14 	call	0x297c	; 0x297c <__pack_f>
    2404:	a0 96       	adiw	r28, 0x20	; 32
    2406:	e6 e0       	ldi	r30, 0x06	; 6
    2408:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

0000240c <__addsf3>:
    240c:	a0 e2       	ldi	r26, 0x20	; 32
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	ec e0       	ldi	r30, 0x0C	; 12
    2412:	f2 e1       	ldi	r31, 0x12	; 18
    2414:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
    2418:	69 83       	std	Y+1, r22	; 0x01
    241a:	7a 83       	std	Y+2, r23	; 0x02
    241c:	8b 83       	std	Y+3, r24	; 0x03
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	2d 83       	std	Y+5, r18	; 0x05
    2422:	3e 83       	std	Y+6, r19	; 0x06
    2424:	4f 83       	std	Y+7, r20	; 0x07
    2426:	58 87       	std	Y+8, r21	; 0x08
    2428:	f9 e0       	ldi	r31, 0x09	; 9
    242a:	ef 2e       	mov	r14, r31
    242c:	f1 2c       	mov	r15, r1
    242e:	ec 0e       	add	r14, r28
    2430:	fd 1e       	adc	r15, r29
    2432:	ce 01       	movw	r24, r28
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	b7 01       	movw	r22, r14
    2438:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    243c:	8e 01       	movw	r16, r28
    243e:	0f 5e       	subi	r16, 0xEF	; 239
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	ce 01       	movw	r24, r28
    2444:	05 96       	adiw	r24, 0x05	; 5
    2446:	b8 01       	movw	r22, r16
    2448:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    244c:	c7 01       	movw	r24, r14
    244e:	b8 01       	movw	r22, r16
    2450:	ae 01       	movw	r20, r28
    2452:	47 5e       	subi	r20, 0xE7	; 231
    2454:	5f 4f       	sbci	r21, 0xFF	; 255
    2456:	0e 94 89 10 	call	0x2112	; 0x2112 <_fpadd_parts>
    245a:	0e 94 be 14 	call	0x297c	; 0x297c <__pack_f>
    245e:	a0 96       	adiw	r28, 0x20	; 32
    2460:	e6 e0       	ldi	r30, 0x06	; 6
    2462:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

00002466 <__mulsf3>:
    2466:	a0 e2       	ldi	r26, 0x20	; 32
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e9 e3       	ldi	r30, 0x39	; 57
    246c:	f2 e1       	ldi	r31, 0x12	; 18
    246e:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__prologue_saves__>
    2472:	69 83       	std	Y+1, r22	; 0x01
    2474:	7a 83       	std	Y+2, r23	; 0x02
    2476:	8b 83       	std	Y+3, r24	; 0x03
    2478:	9c 83       	std	Y+4, r25	; 0x04
    247a:	2d 83       	std	Y+5, r18	; 0x05
    247c:	3e 83       	std	Y+6, r19	; 0x06
    247e:	4f 83       	std	Y+7, r20	; 0x07
    2480:	58 87       	std	Y+8, r21	; 0x08
    2482:	ce 01       	movw	r24, r28
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	be 01       	movw	r22, r28
    2488:	67 5f       	subi	r22, 0xF7	; 247
    248a:	7f 4f       	sbci	r23, 0xFF	; 255
    248c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    2490:	ce 01       	movw	r24, r28
    2492:	05 96       	adiw	r24, 0x05	; 5
    2494:	be 01       	movw	r22, r28
    2496:	6f 5e       	subi	r22, 0xEF	; 239
    2498:	7f 4f       	sbci	r23, 0xFF	; 255
    249a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    249e:	99 85       	ldd	r25, Y+9	; 0x09
    24a0:	92 30       	cpi	r25, 0x02	; 2
    24a2:	88 f0       	brcs	.+34     	; 0x24c6 <__mulsf3+0x60>
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	c8 f0       	brcs	.+50     	; 0x24dc <__mulsf3+0x76>
    24aa:	94 30       	cpi	r25, 0x04	; 4
    24ac:	19 f4       	brne	.+6      	; 0x24b4 <__mulsf3+0x4e>
    24ae:	82 30       	cpi	r24, 0x02	; 2
    24b0:	51 f4       	brne	.+20     	; 0x24c6 <__mulsf3+0x60>
    24b2:	04 c0       	rjmp	.+8      	; 0x24bc <__mulsf3+0x56>
    24b4:	84 30       	cpi	r24, 0x04	; 4
    24b6:	29 f4       	brne	.+10     	; 0x24c2 <__mulsf3+0x5c>
    24b8:	92 30       	cpi	r25, 0x02	; 2
    24ba:	81 f4       	brne	.+32     	; 0x24dc <__mulsf3+0x76>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	c6 c0       	rjmp	.+396    	; 0x264e <__mulsf3+0x1e8>
    24c2:	92 30       	cpi	r25, 0x02	; 2
    24c4:	49 f4       	brne	.+18     	; 0x24d8 <__mulsf3+0x72>
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	8a 89       	ldd	r24, Y+18	; 0x12
    24cc:	98 13       	cpse	r25, r24
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	2a 87       	std	Y+10, r18	; 0x0a
    24d2:	ce 01       	movw	r24, r28
    24d4:	09 96       	adiw	r24, 0x09	; 9
    24d6:	bb c0       	rjmp	.+374    	; 0x264e <__mulsf3+0x1e8>
    24d8:	82 30       	cpi	r24, 0x02	; 2
    24da:	49 f4       	brne	.+18     	; 0x24ee <__mulsf3+0x88>
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	8a 89       	ldd	r24, Y+18	; 0x12
    24e2:	98 13       	cpse	r25, r24
    24e4:	21 e0       	ldi	r18, 0x01	; 1
    24e6:	2a 8b       	std	Y+18, r18	; 0x12
    24e8:	ce 01       	movw	r24, r28
    24ea:	41 96       	adiw	r24, 0x11	; 17
    24ec:	b0 c0       	rjmp	.+352    	; 0x264e <__mulsf3+0x1e8>
    24ee:	2d 84       	ldd	r2, Y+13	; 0x0d
    24f0:	3e 84       	ldd	r3, Y+14	; 0x0e
    24f2:	4f 84       	ldd	r4, Y+15	; 0x0f
    24f4:	58 88       	ldd	r5, Y+16	; 0x10
    24f6:	6d 88       	ldd	r6, Y+21	; 0x15
    24f8:	7e 88       	ldd	r7, Y+22	; 0x16
    24fa:	8f 88       	ldd	r8, Y+23	; 0x17
    24fc:	98 8c       	ldd	r9, Y+24	; 0x18
    24fe:	ee 24       	eor	r14, r14
    2500:	ff 24       	eor	r15, r15
    2502:	87 01       	movw	r16, r14
    2504:	aa 24       	eor	r10, r10
    2506:	bb 24       	eor	r11, r11
    2508:	65 01       	movw	r12, r10
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	e0 e0       	ldi	r30, 0x00	; 0
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	c1 01       	movw	r24, r2
    2518:	81 70       	andi	r24, 0x01	; 1
    251a:	90 70       	andi	r25, 0x00	; 0
    251c:	89 2b       	or	r24, r25
    251e:	e9 f0       	breq	.+58     	; 0x255a <__mulsf3+0xf4>
    2520:	e6 0c       	add	r14, r6
    2522:	f7 1c       	adc	r15, r7
    2524:	08 1d       	adc	r16, r8
    2526:	19 1d       	adc	r17, r9
    2528:	9a 01       	movw	r18, r20
    252a:	ab 01       	movw	r20, r22
    252c:	2a 0d       	add	r18, r10
    252e:	3b 1d       	adc	r19, r11
    2530:	4c 1d       	adc	r20, r12
    2532:	5d 1d       	adc	r21, r13
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	a0 e0       	ldi	r26, 0x00	; 0
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e6 14       	cp	r14, r6
    253e:	f7 04       	cpc	r15, r7
    2540:	08 05       	cpc	r16, r8
    2542:	19 05       	cpc	r17, r9
    2544:	20 f4       	brcc	.+8      	; 0x254e <__mulsf3+0xe8>
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e0       	ldi	r26, 0x00	; 0
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ba 01       	movw	r22, r20
    2550:	a9 01       	movw	r20, r18
    2552:	48 0f       	add	r20, r24
    2554:	59 1f       	adc	r21, r25
    2556:	6a 1f       	adc	r22, r26
    2558:	7b 1f       	adc	r23, r27
    255a:	aa 0c       	add	r10, r10
    255c:	bb 1c       	adc	r11, r11
    255e:	cc 1c       	adc	r12, r12
    2560:	dd 1c       	adc	r13, r13
    2562:	97 fe       	sbrs	r9, 7
    2564:	08 c0       	rjmp	.+16     	; 0x2576 <__mulsf3+0x110>
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e0       	ldi	r26, 0x00	; 0
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	a8 2a       	or	r10, r24
    2570:	b9 2a       	or	r11, r25
    2572:	ca 2a       	or	r12, r26
    2574:	db 2a       	or	r13, r27
    2576:	31 96       	adiw	r30, 0x01	; 1
    2578:	e0 32       	cpi	r30, 0x20	; 32
    257a:	f1 05       	cpc	r31, r1
    257c:	49 f0       	breq	.+18     	; 0x2590 <__mulsf3+0x12a>
    257e:	66 0c       	add	r6, r6
    2580:	77 1c       	adc	r7, r7
    2582:	88 1c       	adc	r8, r8
    2584:	99 1c       	adc	r9, r9
    2586:	56 94       	lsr	r5
    2588:	47 94       	ror	r4
    258a:	37 94       	ror	r3
    258c:	27 94       	ror	r2
    258e:	c3 cf       	rjmp	.-122    	; 0x2516 <__mulsf3+0xb0>
    2590:	fa 85       	ldd	r31, Y+10	; 0x0a
    2592:	ea 89       	ldd	r30, Y+18	; 0x12
    2594:	2b 89       	ldd	r18, Y+19	; 0x13
    2596:	3c 89       	ldd	r19, Y+20	; 0x14
    2598:	8b 85       	ldd	r24, Y+11	; 0x0b
    259a:	9c 85       	ldd	r25, Y+12	; 0x0c
    259c:	28 0f       	add	r18, r24
    259e:	39 1f       	adc	r19, r25
    25a0:	2e 5f       	subi	r18, 0xFE	; 254
    25a2:	3f 4f       	sbci	r19, 0xFF	; 255
    25a4:	17 c0       	rjmp	.+46     	; 0x25d4 <__mulsf3+0x16e>
    25a6:	ca 01       	movw	r24, r20
    25a8:	81 70       	andi	r24, 0x01	; 1
    25aa:	90 70       	andi	r25, 0x00	; 0
    25ac:	89 2b       	or	r24, r25
    25ae:	61 f0       	breq	.+24     	; 0x25c8 <__mulsf3+0x162>
    25b0:	16 95       	lsr	r17
    25b2:	07 95       	ror	r16
    25b4:	f7 94       	ror	r15
    25b6:	e7 94       	ror	r14
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	a0 e0       	ldi	r26, 0x00	; 0
    25be:	b0 e8       	ldi	r27, 0x80	; 128
    25c0:	e8 2a       	or	r14, r24
    25c2:	f9 2a       	or	r15, r25
    25c4:	0a 2b       	or	r16, r26
    25c6:	1b 2b       	or	r17, r27
    25c8:	76 95       	lsr	r23
    25ca:	67 95       	ror	r22
    25cc:	57 95       	ror	r21
    25ce:	47 95       	ror	r20
    25d0:	2f 5f       	subi	r18, 0xFF	; 255
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	77 fd       	sbrc	r23, 7
    25d6:	e7 cf       	rjmp	.-50     	; 0x25a6 <__mulsf3+0x140>
    25d8:	0c c0       	rjmp	.+24     	; 0x25f2 <__mulsf3+0x18c>
    25da:	44 0f       	add	r20, r20
    25dc:	55 1f       	adc	r21, r21
    25de:	66 1f       	adc	r22, r22
    25e0:	77 1f       	adc	r23, r23
    25e2:	17 fd       	sbrc	r17, 7
    25e4:	41 60       	ori	r20, 0x01	; 1
    25e6:	ee 0c       	add	r14, r14
    25e8:	ff 1c       	adc	r15, r15
    25ea:	00 1f       	adc	r16, r16
    25ec:	11 1f       	adc	r17, r17
    25ee:	21 50       	subi	r18, 0x01	; 1
    25f0:	30 40       	sbci	r19, 0x00	; 0
    25f2:	40 30       	cpi	r20, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	59 07       	cpc	r21, r25
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	69 07       	cpc	r22, r25
    25fc:	90 e4       	ldi	r25, 0x40	; 64
    25fe:	79 07       	cpc	r23, r25
    2600:	60 f3       	brcs	.-40     	; 0x25da <__mulsf3+0x174>
    2602:	2b 8f       	std	Y+27, r18	; 0x1b
    2604:	3c 8f       	std	Y+28, r19	; 0x1c
    2606:	db 01       	movw	r26, r22
    2608:	ca 01       	movw	r24, r20
    260a:	8f 77       	andi	r24, 0x7F	; 127
    260c:	90 70       	andi	r25, 0x00	; 0
    260e:	a0 70       	andi	r26, 0x00	; 0
    2610:	b0 70       	andi	r27, 0x00	; 0
    2612:	80 34       	cpi	r24, 0x40	; 64
    2614:	91 05       	cpc	r25, r1
    2616:	a1 05       	cpc	r26, r1
    2618:	b1 05       	cpc	r27, r1
    261a:	61 f4       	brne	.+24     	; 0x2634 <__mulsf3+0x1ce>
    261c:	47 fd       	sbrc	r20, 7
    261e:	0a c0       	rjmp	.+20     	; 0x2634 <__mulsf3+0x1ce>
    2620:	e1 14       	cp	r14, r1
    2622:	f1 04       	cpc	r15, r1
    2624:	01 05       	cpc	r16, r1
    2626:	11 05       	cpc	r17, r1
    2628:	29 f0       	breq	.+10     	; 0x2634 <__mulsf3+0x1ce>
    262a:	40 5c       	subi	r20, 0xC0	; 192
    262c:	5f 4f       	sbci	r21, 0xFF	; 255
    262e:	6f 4f       	sbci	r22, 0xFF	; 255
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	40 78       	andi	r20, 0x80	; 128
    2634:	1a 8e       	std	Y+26, r1	; 0x1a
    2636:	fe 17       	cp	r31, r30
    2638:	11 f0       	breq	.+4      	; 0x263e <__mulsf3+0x1d8>
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	8a 8f       	std	Y+26, r24	; 0x1a
    263e:	4d 8f       	std	Y+29, r20	; 0x1d
    2640:	5e 8f       	std	Y+30, r21	; 0x1e
    2642:	6f 8f       	std	Y+31, r22	; 0x1f
    2644:	78 a3       	std	Y+32, r23	; 0x20
    2646:	83 e0       	ldi	r24, 0x03	; 3
    2648:	89 8f       	std	Y+25, r24	; 0x19
    264a:	ce 01       	movw	r24, r28
    264c:	49 96       	adiw	r24, 0x19	; 25
    264e:	0e 94 be 14 	call	0x297c	; 0x297c <__pack_f>
    2652:	a0 96       	adiw	r28, 0x20	; 32
    2654:	e2 e1       	ldi	r30, 0x12	; 18
    2656:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__epilogue_restores__>

0000265a <__gtsf2>:
    265a:	a8 e1       	ldi	r26, 0x18	; 24
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e3 e3       	ldi	r30, 0x33	; 51
    2660:	f3 e1       	ldi	r31, 0x13	; 19
    2662:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
    2666:	69 83       	std	Y+1, r22	; 0x01
    2668:	7a 83       	std	Y+2, r23	; 0x02
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	2d 83       	std	Y+5, r18	; 0x05
    2670:	3e 83       	std	Y+6, r19	; 0x06
    2672:	4f 83       	std	Y+7, r20	; 0x07
    2674:	58 87       	std	Y+8, r21	; 0x08
    2676:	89 e0       	ldi	r24, 0x09	; 9
    2678:	e8 2e       	mov	r14, r24
    267a:	f1 2c       	mov	r15, r1
    267c:	ec 0e       	add	r14, r28
    267e:	fd 1e       	adc	r15, r29
    2680:	ce 01       	movw	r24, r28
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	b7 01       	movw	r22, r14
    2686:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    268a:	8e 01       	movw	r16, r28
    268c:	0f 5e       	subi	r16, 0xEF	; 239
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	ce 01       	movw	r24, r28
    2692:	05 96       	adiw	r24, 0x05	; 5
    2694:	b8 01       	movw	r22, r16
    2696:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	82 30       	cpi	r24, 0x02	; 2
    269e:	40 f0       	brcs	.+16     	; 0x26b0 <__gtsf2+0x56>
    26a0:	89 89       	ldd	r24, Y+17	; 0x11
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	28 f0       	brcs	.+10     	; 0x26b0 <__gtsf2+0x56>
    26a6:	c7 01       	movw	r24, r14
    26a8:	b8 01       	movw	r22, r16
    26aa:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__fpcmp_parts_f>
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <__gtsf2+0x58>
    26b0:	8f ef       	ldi	r24, 0xFF	; 255
    26b2:	68 96       	adiw	r28, 0x18	; 24
    26b4:	e6 e0       	ldi	r30, 0x06	; 6
    26b6:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

000026ba <__gesf2>:
    26ba:	a8 e1       	ldi	r26, 0x18	; 24
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	e3 e6       	ldi	r30, 0x63	; 99
    26c0:	f3 e1       	ldi	r31, 0x13	; 19
    26c2:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
    26c6:	69 83       	std	Y+1, r22	; 0x01
    26c8:	7a 83       	std	Y+2, r23	; 0x02
    26ca:	8b 83       	std	Y+3, r24	; 0x03
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	2d 83       	std	Y+5, r18	; 0x05
    26d0:	3e 83       	std	Y+6, r19	; 0x06
    26d2:	4f 83       	std	Y+7, r20	; 0x07
    26d4:	58 87       	std	Y+8, r21	; 0x08
    26d6:	89 e0       	ldi	r24, 0x09	; 9
    26d8:	e8 2e       	mov	r14, r24
    26da:	f1 2c       	mov	r15, r1
    26dc:	ec 0e       	add	r14, r28
    26de:	fd 1e       	adc	r15, r29
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	b7 01       	movw	r22, r14
    26e6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    26ea:	8e 01       	movw	r16, r28
    26ec:	0f 5e       	subi	r16, 0xEF	; 239
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	ce 01       	movw	r24, r28
    26f2:	05 96       	adiw	r24, 0x05	; 5
    26f4:	b8 01       	movw	r22, r16
    26f6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    26fa:	89 85       	ldd	r24, Y+9	; 0x09
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	40 f0       	brcs	.+16     	; 0x2710 <__gesf2+0x56>
    2700:	89 89       	ldd	r24, Y+17	; 0x11
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	28 f0       	brcs	.+10     	; 0x2710 <__gesf2+0x56>
    2706:	c7 01       	movw	r24, r14
    2708:	b8 01       	movw	r22, r16
    270a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__fpcmp_parts_f>
    270e:	01 c0       	rjmp	.+2      	; 0x2712 <__gesf2+0x58>
    2710:	8f ef       	ldi	r24, 0xFF	; 255
    2712:	68 96       	adiw	r28, 0x18	; 24
    2714:	e6 e0       	ldi	r30, 0x06	; 6
    2716:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

0000271a <__ltsf2>:
    271a:	a8 e1       	ldi	r26, 0x18	; 24
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e3 e9       	ldi	r30, 0x93	; 147
    2720:	f3 e1       	ldi	r31, 0x13	; 19
    2722:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
    2726:	69 83       	std	Y+1, r22	; 0x01
    2728:	7a 83       	std	Y+2, r23	; 0x02
    272a:	8b 83       	std	Y+3, r24	; 0x03
    272c:	9c 83       	std	Y+4, r25	; 0x04
    272e:	2d 83       	std	Y+5, r18	; 0x05
    2730:	3e 83       	std	Y+6, r19	; 0x06
    2732:	4f 83       	std	Y+7, r20	; 0x07
    2734:	58 87       	std	Y+8, r21	; 0x08
    2736:	89 e0       	ldi	r24, 0x09	; 9
    2738:	e8 2e       	mov	r14, r24
    273a:	f1 2c       	mov	r15, r1
    273c:	ec 0e       	add	r14, r28
    273e:	fd 1e       	adc	r15, r29
    2740:	ce 01       	movw	r24, r28
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	b7 01       	movw	r22, r14
    2746:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    274a:	8e 01       	movw	r16, r28
    274c:	0f 5e       	subi	r16, 0xEF	; 239
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	ce 01       	movw	r24, r28
    2752:	05 96       	adiw	r24, 0x05	; 5
    2754:	b8 01       	movw	r22, r16
    2756:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	82 30       	cpi	r24, 0x02	; 2
    275e:	40 f0       	brcs	.+16     	; 0x2770 <__ltsf2+0x56>
    2760:	89 89       	ldd	r24, Y+17	; 0x11
    2762:	82 30       	cpi	r24, 0x02	; 2
    2764:	28 f0       	brcs	.+10     	; 0x2770 <__ltsf2+0x56>
    2766:	c7 01       	movw	r24, r14
    2768:	b8 01       	movw	r22, r16
    276a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__fpcmp_parts_f>
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <__ltsf2+0x58>
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	68 96       	adiw	r28, 0x18	; 24
    2774:	e6 e0       	ldi	r30, 0x06	; 6
    2776:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

0000277a <__floatsisf>:
    277a:	a8 e0       	ldi	r26, 0x08	; 8
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e3 ec       	ldi	r30, 0xC3	; 195
    2780:	f3 e1       	ldi	r31, 0x13	; 19
    2782:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__prologue_saves__+0x12>
    2786:	9b 01       	movw	r18, r22
    2788:	ac 01       	movw	r20, r24
    278a:	83 e0       	ldi	r24, 0x03	; 3
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	da 01       	movw	r26, r20
    2790:	c9 01       	movw	r24, r18
    2792:	88 27       	eor	r24, r24
    2794:	b7 fd       	sbrc	r27, 7
    2796:	83 95       	inc	r24
    2798:	99 27       	eor	r25, r25
    279a:	aa 27       	eor	r26, r26
    279c:	bb 27       	eor	r27, r27
    279e:	b8 2e       	mov	r11, r24
    27a0:	21 15       	cp	r18, r1
    27a2:	31 05       	cpc	r19, r1
    27a4:	41 05       	cpc	r20, r1
    27a6:	51 05       	cpc	r21, r1
    27a8:	19 f4       	brne	.+6      	; 0x27b0 <__floatsisf+0x36>
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	3a c0       	rjmp	.+116    	; 0x2824 <__floatsisf+0xaa>
    27b0:	88 23       	and	r24, r24
    27b2:	a9 f0       	breq	.+42     	; 0x27de <__floatsisf+0x64>
    27b4:	20 30       	cpi	r18, 0x00	; 0
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	38 07       	cpc	r19, r24
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	48 07       	cpc	r20, r24
    27be:	80 e8       	ldi	r24, 0x80	; 128
    27c0:	58 07       	cpc	r21, r24
    27c2:	29 f4       	brne	.+10     	; 0x27ce <__floatsisf+0x54>
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	9f ec       	ldi	r25, 0xCF	; 207
    27cc:	30 c0       	rjmp	.+96     	; 0x282e <__floatsisf+0xb4>
    27ce:	ee 24       	eor	r14, r14
    27d0:	ff 24       	eor	r15, r15
    27d2:	87 01       	movw	r16, r14
    27d4:	e2 1a       	sub	r14, r18
    27d6:	f3 0a       	sbc	r15, r19
    27d8:	04 0b       	sbc	r16, r20
    27da:	15 0b       	sbc	r17, r21
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <__floatsisf+0x68>
    27de:	79 01       	movw	r14, r18
    27e0:	8a 01       	movw	r16, r20
    27e2:	8e e1       	ldi	r24, 0x1E	; 30
    27e4:	c8 2e       	mov	r12, r24
    27e6:	d1 2c       	mov	r13, r1
    27e8:	dc 82       	std	Y+4, r13	; 0x04
    27ea:	cb 82       	std	Y+3, r12	; 0x03
    27ec:	ed 82       	std	Y+5, r14	; 0x05
    27ee:	fe 82       	std	Y+6, r15	; 0x06
    27f0:	0f 83       	std	Y+7, r16	; 0x07
    27f2:	18 87       	std	Y+8, r17	; 0x08
    27f4:	c8 01       	movw	r24, r16
    27f6:	b7 01       	movw	r22, r14
    27f8:	0e 94 6f 14 	call	0x28de	; 0x28de <__clzsi2>
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	18 16       	cp	r1, r24
    2800:	19 06       	cpc	r1, r25
    2802:	84 f4       	brge	.+32     	; 0x2824 <__floatsisf+0xaa>
    2804:	08 2e       	mov	r0, r24
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <__floatsisf+0x96>
    2808:	ee 0c       	add	r14, r14
    280a:	ff 1c       	adc	r15, r15
    280c:	00 1f       	adc	r16, r16
    280e:	11 1f       	adc	r17, r17
    2810:	0a 94       	dec	r0
    2812:	d2 f7       	brpl	.-12     	; 0x2808 <__floatsisf+0x8e>
    2814:	ed 82       	std	Y+5, r14	; 0x05
    2816:	fe 82       	std	Y+6, r15	; 0x06
    2818:	0f 83       	std	Y+7, r16	; 0x07
    281a:	18 87       	std	Y+8, r17	; 0x08
    281c:	c8 1a       	sub	r12, r24
    281e:	d9 0a       	sbc	r13, r25
    2820:	dc 82       	std	Y+4, r13	; 0x04
    2822:	cb 82       	std	Y+3, r12	; 0x03
    2824:	ba 82       	std	Y+2, r11	; 0x02
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	0e 94 be 14 	call	0x297c	; 0x297c <__pack_f>
    282e:	28 96       	adiw	r28, 0x08	; 8
    2830:	e9 e0       	ldi	r30, 0x09	; 9
    2832:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__epilogue_restores__+0x12>

00002836 <__fixsfsi>:
    2836:	ac e0       	ldi	r26, 0x0C	; 12
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e1 e2       	ldi	r30, 0x21	; 33
    283c:	f4 e1       	ldi	r31, 0x14	; 20
    283e:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__prologue_saves__+0x20>
    2842:	69 83       	std	Y+1, r22	; 0x01
    2844:	7a 83       	std	Y+2, r23	; 0x02
    2846:	8b 83       	std	Y+3, r24	; 0x03
    2848:	9c 83       	std	Y+4, r25	; 0x04
    284a:	ce 01       	movw	r24, r28
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	be 01       	movw	r22, r28
    2850:	6b 5f       	subi	r22, 0xFB	; 251
    2852:	7f 4f       	sbci	r23, 0xFF	; 255
    2854:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__unpack_f>
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	82 30       	cpi	r24, 0x02	; 2
    285c:	61 f1       	breq	.+88     	; 0x28b6 <__fixsfsi+0x80>
    285e:	82 30       	cpi	r24, 0x02	; 2
    2860:	50 f1       	brcs	.+84     	; 0x28b6 <__fixsfsi+0x80>
    2862:	84 30       	cpi	r24, 0x04	; 4
    2864:	21 f4       	brne	.+8      	; 0x286e <__fixsfsi+0x38>
    2866:	8e 81       	ldd	r24, Y+6	; 0x06
    2868:	88 23       	and	r24, r24
    286a:	51 f1       	breq	.+84     	; 0x28c0 <__fixsfsi+0x8a>
    286c:	2e c0       	rjmp	.+92     	; 0x28ca <__fixsfsi+0x94>
    286e:	2f 81       	ldd	r18, Y+7	; 0x07
    2870:	38 85       	ldd	r19, Y+8	; 0x08
    2872:	37 fd       	sbrc	r19, 7
    2874:	20 c0       	rjmp	.+64     	; 0x28b6 <__fixsfsi+0x80>
    2876:	6e 81       	ldd	r22, Y+6	; 0x06
    2878:	2f 31       	cpi	r18, 0x1F	; 31
    287a:	31 05       	cpc	r19, r1
    287c:	1c f0       	brlt	.+6      	; 0x2884 <__fixsfsi+0x4e>
    287e:	66 23       	and	r22, r22
    2880:	f9 f0       	breq	.+62     	; 0x28c0 <__fixsfsi+0x8a>
    2882:	23 c0       	rjmp	.+70     	; 0x28ca <__fixsfsi+0x94>
    2884:	8e e1       	ldi	r24, 0x1E	; 30
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	82 1b       	sub	r24, r18
    288a:	93 0b       	sbc	r25, r19
    288c:	29 85       	ldd	r18, Y+9	; 0x09
    288e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2890:	4b 85       	ldd	r20, Y+11	; 0x0b
    2892:	5c 85       	ldd	r21, Y+12	; 0x0c
    2894:	04 c0       	rjmp	.+8      	; 0x289e <__fixsfsi+0x68>
    2896:	56 95       	lsr	r21
    2898:	47 95       	ror	r20
    289a:	37 95       	ror	r19
    289c:	27 95       	ror	r18
    289e:	8a 95       	dec	r24
    28a0:	d2 f7       	brpl	.-12     	; 0x2896 <__fixsfsi+0x60>
    28a2:	66 23       	and	r22, r22
    28a4:	b1 f0       	breq	.+44     	; 0x28d2 <__fixsfsi+0x9c>
    28a6:	50 95       	com	r21
    28a8:	40 95       	com	r20
    28aa:	30 95       	com	r19
    28ac:	21 95       	neg	r18
    28ae:	3f 4f       	sbci	r19, 0xFF	; 255
    28b0:	4f 4f       	sbci	r20, 0xFF	; 255
    28b2:	5f 4f       	sbci	r21, 0xFF	; 255
    28b4:	0e c0       	rjmp	.+28     	; 0x28d2 <__fixsfsi+0x9c>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	09 c0       	rjmp	.+18     	; 0x28d2 <__fixsfsi+0x9c>
    28c0:	2f ef       	ldi	r18, 0xFF	; 255
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	4f ef       	ldi	r20, 0xFF	; 255
    28c6:	5f e7       	ldi	r21, 0x7F	; 127
    28c8:	04 c0       	rjmp	.+8      	; 0x28d2 <__fixsfsi+0x9c>
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	50 e8       	ldi	r21, 0x80	; 128
    28d2:	b9 01       	movw	r22, r18
    28d4:	ca 01       	movw	r24, r20
    28d6:	2c 96       	adiw	r28, 0x0c	; 12
    28d8:	e2 e0       	ldi	r30, 0x02	; 2
    28da:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__epilogue_restores__+0x20>

000028de <__clzsi2>:
    28de:	ef 92       	push	r14
    28e0:	ff 92       	push	r15
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	7b 01       	movw	r14, r22
    28e8:	8c 01       	movw	r16, r24
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	e8 16       	cp	r14, r24
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	f8 06       	cpc	r15, r24
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	08 07       	cpc	r16, r24
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	18 07       	cpc	r17, r24
    28fa:	88 f4       	brcc	.+34     	; 0x291e <__clzsi2+0x40>
    28fc:	8f ef       	ldi	r24, 0xFF	; 255
    28fe:	e8 16       	cp	r14, r24
    2900:	f1 04       	cpc	r15, r1
    2902:	01 05       	cpc	r16, r1
    2904:	11 05       	cpc	r17, r1
    2906:	31 f0       	breq	.+12     	; 0x2914 <__clzsi2+0x36>
    2908:	28 f0       	brcs	.+10     	; 0x2914 <__clzsi2+0x36>
    290a:	88 e0       	ldi	r24, 0x08	; 8
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	17 c0       	rjmp	.+46     	; 0x2942 <__clzsi2+0x64>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 e0       	ldi	r26, 0x00	; 0
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	12 c0       	rjmp	.+36     	; 0x2942 <__clzsi2+0x64>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	e8 16       	cp	r14, r24
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	f8 06       	cpc	r15, r24
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	08 07       	cpc	r16, r24
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	18 07       	cpc	r17, r24
    292e:	28 f0       	brcs	.+10     	; 0x293a <__clzsi2+0x5c>
    2930:	88 e1       	ldi	r24, 0x18	; 24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 e0       	ldi	r26, 0x00	; 0
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <__clzsi2+0x64>
    293a:	80 e1       	ldi	r24, 0x10	; 16
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a0 e0       	ldi	r26, 0x00	; 0
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	20 e2       	ldi	r18, 0x20	; 32
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	28 1b       	sub	r18, r24
    294c:	39 0b       	sbc	r19, r25
    294e:	4a 0b       	sbc	r20, r26
    2950:	5b 0b       	sbc	r21, r27
    2952:	04 c0       	rjmp	.+8      	; 0x295c <__clzsi2+0x7e>
    2954:	16 95       	lsr	r17
    2956:	07 95       	ror	r16
    2958:	f7 94       	ror	r15
    295a:	e7 94       	ror	r14
    295c:	8a 95       	dec	r24
    295e:	d2 f7       	brpl	.-12     	; 0x2954 <__clzsi2+0x76>
    2960:	f7 01       	movw	r30, r14
    2962:	e8 5f       	subi	r30, 0xF8	; 248
    2964:	fd 4f       	sbci	r31, 0xFD	; 253
    2966:	80 81       	ld	r24, Z
    2968:	28 1b       	sub	r18, r24
    296a:	31 09       	sbc	r19, r1
    296c:	41 09       	sbc	r20, r1
    296e:	51 09       	sbc	r21, r1
    2970:	c9 01       	movw	r24, r18
    2972:	1f 91       	pop	r17
    2974:	0f 91       	pop	r16
    2976:	ff 90       	pop	r15
    2978:	ef 90       	pop	r14
    297a:	08 95       	ret

0000297c <__pack_f>:
    297c:	df 92       	push	r13
    297e:	ef 92       	push	r14
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	fc 01       	movw	r30, r24
    2988:	e4 80       	ldd	r14, Z+4	; 0x04
    298a:	f5 80       	ldd	r15, Z+5	; 0x05
    298c:	06 81       	ldd	r16, Z+6	; 0x06
    298e:	17 81       	ldd	r17, Z+7	; 0x07
    2990:	d1 80       	ldd	r13, Z+1	; 0x01
    2992:	80 81       	ld	r24, Z
    2994:	82 30       	cpi	r24, 0x02	; 2
    2996:	48 f4       	brcc	.+18     	; 0x29aa <__pack_f+0x2e>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a0 e1       	ldi	r26, 0x10	; 16
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e8 2a       	or	r14, r24
    29a2:	f9 2a       	or	r15, r25
    29a4:	0a 2b       	or	r16, r26
    29a6:	1b 2b       	or	r17, r27
    29a8:	a5 c0       	rjmp	.+330    	; 0x2af4 <__pack_f+0x178>
    29aa:	84 30       	cpi	r24, 0x04	; 4
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <__pack_f+0x34>
    29ae:	9f c0       	rjmp	.+318    	; 0x2aee <__pack_f+0x172>
    29b0:	82 30       	cpi	r24, 0x02	; 2
    29b2:	21 f4       	brne	.+8      	; 0x29bc <__pack_f+0x40>
    29b4:	ee 24       	eor	r14, r14
    29b6:	ff 24       	eor	r15, r15
    29b8:	87 01       	movw	r16, r14
    29ba:	05 c0       	rjmp	.+10     	; 0x29c6 <__pack_f+0x4a>
    29bc:	e1 14       	cp	r14, r1
    29be:	f1 04       	cpc	r15, r1
    29c0:	01 05       	cpc	r16, r1
    29c2:	11 05       	cpc	r17, r1
    29c4:	19 f4       	brne	.+6      	; 0x29cc <__pack_f+0x50>
    29c6:	e0 e0       	ldi	r30, 0x00	; 0
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	96 c0       	rjmp	.+300    	; 0x2af8 <__pack_f+0x17c>
    29cc:	62 81       	ldd	r22, Z+2	; 0x02
    29ce:	73 81       	ldd	r23, Z+3	; 0x03
    29d0:	9f ef       	ldi	r25, 0xFF	; 255
    29d2:	62 38       	cpi	r22, 0x82	; 130
    29d4:	79 07       	cpc	r23, r25
    29d6:	0c f0       	brlt	.+2      	; 0x29da <__pack_f+0x5e>
    29d8:	5b c0       	rjmp	.+182    	; 0x2a90 <__pack_f+0x114>
    29da:	22 e8       	ldi	r18, 0x82	; 130
    29dc:	3f ef       	ldi	r19, 0xFF	; 255
    29de:	26 1b       	sub	r18, r22
    29e0:	37 0b       	sbc	r19, r23
    29e2:	2a 31       	cpi	r18, 0x1A	; 26
    29e4:	31 05       	cpc	r19, r1
    29e6:	2c f0       	brlt	.+10     	; 0x29f2 <__pack_f+0x76>
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	2a c0       	rjmp	.+84     	; 0x2a46 <__pack_f+0xca>
    29f2:	b8 01       	movw	r22, r16
    29f4:	a7 01       	movw	r20, r14
    29f6:	02 2e       	mov	r0, r18
    29f8:	04 c0       	rjmp	.+8      	; 0x2a02 <__pack_f+0x86>
    29fa:	76 95       	lsr	r23
    29fc:	67 95       	ror	r22
    29fe:	57 95       	ror	r21
    2a00:	47 95       	ror	r20
    2a02:	0a 94       	dec	r0
    2a04:	d2 f7       	brpl	.-12     	; 0x29fa <__pack_f+0x7e>
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	a0 e0       	ldi	r26, 0x00	; 0
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <__pack_f+0x9c>
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	aa 1f       	adc	r26, r26
    2a16:	bb 1f       	adc	r27, r27
    2a18:	2a 95       	dec	r18
    2a1a:	d2 f7       	brpl	.-12     	; 0x2a10 <__pack_f+0x94>
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	a1 09       	sbc	r26, r1
    2a20:	b1 09       	sbc	r27, r1
    2a22:	8e 21       	and	r24, r14
    2a24:	9f 21       	and	r25, r15
    2a26:	a0 23       	and	r26, r16
    2a28:	b1 23       	and	r27, r17
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	a1 05       	cpc	r26, r1
    2a2e:	b1 05       	cpc	r27, r1
    2a30:	21 f0       	breq	.+8      	; 0x2a3a <__pack_f+0xbe>
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a0 e0       	ldi	r26, 0x00	; 0
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	9a 01       	movw	r18, r20
    2a3c:	ab 01       	movw	r20, r22
    2a3e:	28 2b       	or	r18, r24
    2a40:	39 2b       	or	r19, r25
    2a42:	4a 2b       	or	r20, r26
    2a44:	5b 2b       	or	r21, r27
    2a46:	da 01       	movw	r26, r20
    2a48:	c9 01       	movw	r24, r18
    2a4a:	8f 77       	andi	r24, 0x7F	; 127
    2a4c:	90 70       	andi	r25, 0x00	; 0
    2a4e:	a0 70       	andi	r26, 0x00	; 0
    2a50:	b0 70       	andi	r27, 0x00	; 0
    2a52:	80 34       	cpi	r24, 0x40	; 64
    2a54:	91 05       	cpc	r25, r1
    2a56:	a1 05       	cpc	r26, r1
    2a58:	b1 05       	cpc	r27, r1
    2a5a:	39 f4       	brne	.+14     	; 0x2a6a <__pack_f+0xee>
    2a5c:	27 ff       	sbrs	r18, 7
    2a5e:	09 c0       	rjmp	.+18     	; 0x2a72 <__pack_f+0xf6>
    2a60:	20 5c       	subi	r18, 0xC0	; 192
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	4f 4f       	sbci	r20, 0xFF	; 255
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <__pack_f+0xf6>
    2a6a:	21 5c       	subi	r18, 0xC1	; 193
    2a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a70:	5f 4f       	sbci	r21, 0xFF	; 255
    2a72:	e0 e0       	ldi	r30, 0x00	; 0
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	20 30       	cpi	r18, 0x00	; 0
    2a78:	a0 e0       	ldi	r26, 0x00	; 0
    2a7a:	3a 07       	cpc	r19, r26
    2a7c:	a0 e0       	ldi	r26, 0x00	; 0
    2a7e:	4a 07       	cpc	r20, r26
    2a80:	a0 e4       	ldi	r26, 0x40	; 64
    2a82:	5a 07       	cpc	r21, r26
    2a84:	10 f0       	brcs	.+4      	; 0x2a8a <__pack_f+0x10e>
    2a86:	e1 e0       	ldi	r30, 0x01	; 1
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	79 01       	movw	r14, r18
    2a8c:	8a 01       	movw	r16, r20
    2a8e:	27 c0       	rjmp	.+78     	; 0x2ade <__pack_f+0x162>
    2a90:	60 38       	cpi	r22, 0x80	; 128
    2a92:	71 05       	cpc	r23, r1
    2a94:	64 f5       	brge	.+88     	; 0x2aee <__pack_f+0x172>
    2a96:	fb 01       	movw	r30, r22
    2a98:	e1 58       	subi	r30, 0x81	; 129
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	d8 01       	movw	r26, r16
    2a9e:	c7 01       	movw	r24, r14
    2aa0:	8f 77       	andi	r24, 0x7F	; 127
    2aa2:	90 70       	andi	r25, 0x00	; 0
    2aa4:	a0 70       	andi	r26, 0x00	; 0
    2aa6:	b0 70       	andi	r27, 0x00	; 0
    2aa8:	80 34       	cpi	r24, 0x40	; 64
    2aaa:	91 05       	cpc	r25, r1
    2aac:	a1 05       	cpc	r26, r1
    2aae:	b1 05       	cpc	r27, r1
    2ab0:	39 f4       	brne	.+14     	; 0x2ac0 <__pack_f+0x144>
    2ab2:	e7 fe       	sbrs	r14, 7
    2ab4:	0d c0       	rjmp	.+26     	; 0x2ad0 <__pack_f+0x154>
    2ab6:	80 e4       	ldi	r24, 0x40	; 64
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	a0 e0       	ldi	r26, 0x00	; 0
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <__pack_f+0x14c>
    2ac0:	8f e3       	ldi	r24, 0x3F	; 63
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	a0 e0       	ldi	r26, 0x00	; 0
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e8 0e       	add	r14, r24
    2aca:	f9 1e       	adc	r15, r25
    2acc:	0a 1f       	adc	r16, r26
    2ace:	1b 1f       	adc	r17, r27
    2ad0:	17 ff       	sbrs	r17, 7
    2ad2:	05 c0       	rjmp	.+10     	; 0x2ade <__pack_f+0x162>
    2ad4:	16 95       	lsr	r17
    2ad6:	07 95       	ror	r16
    2ad8:	f7 94       	ror	r15
    2ada:	e7 94       	ror	r14
    2adc:	31 96       	adiw	r30, 0x01	; 1
    2ade:	87 e0       	ldi	r24, 0x07	; 7
    2ae0:	16 95       	lsr	r17
    2ae2:	07 95       	ror	r16
    2ae4:	f7 94       	ror	r15
    2ae6:	e7 94       	ror	r14
    2ae8:	8a 95       	dec	r24
    2aea:	d1 f7       	brne	.-12     	; 0x2ae0 <__pack_f+0x164>
    2aec:	05 c0       	rjmp	.+10     	; 0x2af8 <__pack_f+0x17c>
    2aee:	ee 24       	eor	r14, r14
    2af0:	ff 24       	eor	r15, r15
    2af2:	87 01       	movw	r16, r14
    2af4:	ef ef       	ldi	r30, 0xFF	; 255
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	6e 2f       	mov	r22, r30
    2afa:	67 95       	ror	r22
    2afc:	66 27       	eor	r22, r22
    2afe:	67 95       	ror	r22
    2b00:	90 2f       	mov	r25, r16
    2b02:	9f 77       	andi	r25, 0x7F	; 127
    2b04:	d7 94       	ror	r13
    2b06:	dd 24       	eor	r13, r13
    2b08:	d7 94       	ror	r13
    2b0a:	8e 2f       	mov	r24, r30
    2b0c:	86 95       	lsr	r24
    2b0e:	49 2f       	mov	r20, r25
    2b10:	46 2b       	or	r20, r22
    2b12:	58 2f       	mov	r21, r24
    2b14:	5d 29       	or	r21, r13
    2b16:	b7 01       	movw	r22, r14
    2b18:	ca 01       	movw	r24, r20
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	08 95       	ret

00002b26 <__unpack_f>:
    2b26:	fc 01       	movw	r30, r24
    2b28:	db 01       	movw	r26, r22
    2b2a:	40 81       	ld	r20, Z
    2b2c:	51 81       	ldd	r21, Z+1	; 0x01
    2b2e:	22 81       	ldd	r18, Z+2	; 0x02
    2b30:	62 2f       	mov	r22, r18
    2b32:	6f 77       	andi	r22, 0x7F	; 127
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	22 1f       	adc	r18, r18
    2b38:	22 27       	eor	r18, r18
    2b3a:	22 1f       	adc	r18, r18
    2b3c:	93 81       	ldd	r25, Z+3	; 0x03
    2b3e:	89 2f       	mov	r24, r25
    2b40:	88 0f       	add	r24, r24
    2b42:	82 2b       	or	r24, r18
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	99 1f       	adc	r25, r25
    2b4a:	99 27       	eor	r25, r25
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	11 96       	adiw	r26, 0x01	; 1
    2b50:	9c 93       	st	X, r25
    2b52:	11 97       	sbiw	r26, 0x01	; 1
    2b54:	21 15       	cp	r18, r1
    2b56:	31 05       	cpc	r19, r1
    2b58:	a9 f5       	brne	.+106    	; 0x2bc4 <__unpack_f+0x9e>
    2b5a:	41 15       	cp	r20, r1
    2b5c:	51 05       	cpc	r21, r1
    2b5e:	61 05       	cpc	r22, r1
    2b60:	71 05       	cpc	r23, r1
    2b62:	11 f4       	brne	.+4      	; 0x2b68 <__unpack_f+0x42>
    2b64:	82 e0       	ldi	r24, 0x02	; 2
    2b66:	37 c0       	rjmp	.+110    	; 0x2bd6 <__unpack_f+0xb0>
    2b68:	82 e8       	ldi	r24, 0x82	; 130
    2b6a:	9f ef       	ldi	r25, 0xFF	; 255
    2b6c:	13 96       	adiw	r26, 0x03	; 3
    2b6e:	9c 93       	st	X, r25
    2b70:	8e 93       	st	-X, r24
    2b72:	12 97       	sbiw	r26, 0x02	; 2
    2b74:	9a 01       	movw	r18, r20
    2b76:	ab 01       	movw	r20, r22
    2b78:	67 e0       	ldi	r22, 0x07	; 7
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	44 1f       	adc	r20, r20
    2b80:	55 1f       	adc	r21, r21
    2b82:	6a 95       	dec	r22
    2b84:	d1 f7       	brne	.-12     	; 0x2b7a <__unpack_f+0x54>
    2b86:	83 e0       	ldi	r24, 0x03	; 3
    2b88:	8c 93       	st	X, r24
    2b8a:	0d c0       	rjmp	.+26     	; 0x2ba6 <__unpack_f+0x80>
    2b8c:	22 0f       	add	r18, r18
    2b8e:	33 1f       	adc	r19, r19
    2b90:	44 1f       	adc	r20, r20
    2b92:	55 1f       	adc	r21, r21
    2b94:	12 96       	adiw	r26, 0x02	; 2
    2b96:	8d 91       	ld	r24, X+
    2b98:	9c 91       	ld	r25, X
    2b9a:	13 97       	sbiw	r26, 0x03	; 3
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	13 96       	adiw	r26, 0x03	; 3
    2ba0:	9c 93       	st	X, r25
    2ba2:	8e 93       	st	-X, r24
    2ba4:	12 97       	sbiw	r26, 0x02	; 2
    2ba6:	20 30       	cpi	r18, 0x00	; 0
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	38 07       	cpc	r19, r24
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	48 07       	cpc	r20, r24
    2bb0:	80 e4       	ldi	r24, 0x40	; 64
    2bb2:	58 07       	cpc	r21, r24
    2bb4:	58 f3       	brcs	.-42     	; 0x2b8c <__unpack_f+0x66>
    2bb6:	14 96       	adiw	r26, 0x04	; 4
    2bb8:	2d 93       	st	X+, r18
    2bba:	3d 93       	st	X+, r19
    2bbc:	4d 93       	st	X+, r20
    2bbe:	5c 93       	st	X, r21
    2bc0:	17 97       	sbiw	r26, 0x07	; 7
    2bc2:	08 95       	ret
    2bc4:	2f 3f       	cpi	r18, 0xFF	; 255
    2bc6:	31 05       	cpc	r19, r1
    2bc8:	79 f4       	brne	.+30     	; 0x2be8 <__unpack_f+0xc2>
    2bca:	41 15       	cp	r20, r1
    2bcc:	51 05       	cpc	r21, r1
    2bce:	61 05       	cpc	r22, r1
    2bd0:	71 05       	cpc	r23, r1
    2bd2:	19 f4       	brne	.+6      	; 0x2bda <__unpack_f+0xb4>
    2bd4:	84 e0       	ldi	r24, 0x04	; 4
    2bd6:	8c 93       	st	X, r24
    2bd8:	08 95       	ret
    2bda:	64 ff       	sbrs	r22, 4
    2bdc:	03 c0       	rjmp	.+6      	; 0x2be4 <__unpack_f+0xbe>
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	8c 93       	st	X, r24
    2be2:	12 c0       	rjmp	.+36     	; 0x2c08 <__unpack_f+0xe2>
    2be4:	1c 92       	st	X, r1
    2be6:	10 c0       	rjmp	.+32     	; 0x2c08 <__unpack_f+0xe2>
    2be8:	2f 57       	subi	r18, 0x7F	; 127
    2bea:	30 40       	sbci	r19, 0x00	; 0
    2bec:	13 96       	adiw	r26, 0x03	; 3
    2bee:	3c 93       	st	X, r19
    2bf0:	2e 93       	st	-X, r18
    2bf2:	12 97       	sbiw	r26, 0x02	; 2
    2bf4:	83 e0       	ldi	r24, 0x03	; 3
    2bf6:	8c 93       	st	X, r24
    2bf8:	87 e0       	ldi	r24, 0x07	; 7
    2bfa:	44 0f       	add	r20, r20
    2bfc:	55 1f       	adc	r21, r21
    2bfe:	66 1f       	adc	r22, r22
    2c00:	77 1f       	adc	r23, r23
    2c02:	8a 95       	dec	r24
    2c04:	d1 f7       	brne	.-12     	; 0x2bfa <__unpack_f+0xd4>
    2c06:	70 64       	ori	r23, 0x40	; 64
    2c08:	14 96       	adiw	r26, 0x04	; 4
    2c0a:	4d 93       	st	X+, r20
    2c0c:	5d 93       	st	X+, r21
    2c0e:	6d 93       	st	X+, r22
    2c10:	7c 93       	st	X, r23
    2c12:	17 97       	sbiw	r26, 0x07	; 7
    2c14:	08 95       	ret

00002c16 <__fpcmp_parts_f>:
    2c16:	1f 93       	push	r17
    2c18:	dc 01       	movw	r26, r24
    2c1a:	fb 01       	movw	r30, r22
    2c1c:	9c 91       	ld	r25, X
    2c1e:	92 30       	cpi	r25, 0x02	; 2
    2c20:	08 f4       	brcc	.+2      	; 0x2c24 <__fpcmp_parts_f+0xe>
    2c22:	47 c0       	rjmp	.+142    	; 0x2cb2 <__fpcmp_parts_f+0x9c>
    2c24:	80 81       	ld	r24, Z
    2c26:	82 30       	cpi	r24, 0x02	; 2
    2c28:	08 f4       	brcc	.+2      	; 0x2c2c <__fpcmp_parts_f+0x16>
    2c2a:	43 c0       	rjmp	.+134    	; 0x2cb2 <__fpcmp_parts_f+0x9c>
    2c2c:	94 30       	cpi	r25, 0x04	; 4
    2c2e:	51 f4       	brne	.+20     	; 0x2c44 <__fpcmp_parts_f+0x2e>
    2c30:	11 96       	adiw	r26, 0x01	; 1
    2c32:	1c 91       	ld	r17, X
    2c34:	84 30       	cpi	r24, 0x04	; 4
    2c36:	99 f5       	brne	.+102    	; 0x2c9e <__fpcmp_parts_f+0x88>
    2c38:	81 81       	ldd	r24, Z+1	; 0x01
    2c3a:	68 2f       	mov	r22, r24
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	61 1b       	sub	r22, r17
    2c40:	71 09       	sbc	r23, r1
    2c42:	3f c0       	rjmp	.+126    	; 0x2cc2 <__fpcmp_parts_f+0xac>
    2c44:	84 30       	cpi	r24, 0x04	; 4
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <__fpcmp_parts_f+0x3a>
    2c48:	92 30       	cpi	r25, 0x02	; 2
    2c4a:	31 f4       	brne	.+12     	; 0x2c58 <__fpcmp_parts_f+0x42>
    2c4c:	82 30       	cpi	r24, 0x02	; 2
    2c4e:	b9 f1       	breq	.+110    	; 0x2cbe <__fpcmp_parts_f+0xa8>
    2c50:	81 81       	ldd	r24, Z+1	; 0x01
    2c52:	88 23       	and	r24, r24
    2c54:	89 f1       	breq	.+98     	; 0x2cb8 <__fpcmp_parts_f+0xa2>
    2c56:	2d c0       	rjmp	.+90     	; 0x2cb2 <__fpcmp_parts_f+0x9c>
    2c58:	11 96       	adiw	r26, 0x01	; 1
    2c5a:	1c 91       	ld	r17, X
    2c5c:	11 97       	sbiw	r26, 0x01	; 1
    2c5e:	82 30       	cpi	r24, 0x02	; 2
    2c60:	f1 f0       	breq	.+60     	; 0x2c9e <__fpcmp_parts_f+0x88>
    2c62:	81 81       	ldd	r24, Z+1	; 0x01
    2c64:	18 17       	cp	r17, r24
    2c66:	d9 f4       	brne	.+54     	; 0x2c9e <__fpcmp_parts_f+0x88>
    2c68:	12 96       	adiw	r26, 0x02	; 2
    2c6a:	2d 91       	ld	r18, X+
    2c6c:	3c 91       	ld	r19, X
    2c6e:	13 97       	sbiw	r26, 0x03	; 3
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	82 17       	cp	r24, r18
    2c76:	93 07       	cpc	r25, r19
    2c78:	94 f0       	brlt	.+36     	; 0x2c9e <__fpcmp_parts_f+0x88>
    2c7a:	28 17       	cp	r18, r24
    2c7c:	39 07       	cpc	r19, r25
    2c7e:	bc f0       	brlt	.+46     	; 0x2cae <__fpcmp_parts_f+0x98>
    2c80:	14 96       	adiw	r26, 0x04	; 4
    2c82:	8d 91       	ld	r24, X+
    2c84:	9d 91       	ld	r25, X+
    2c86:	0d 90       	ld	r0, X+
    2c88:	bc 91       	ld	r27, X
    2c8a:	a0 2d       	mov	r26, r0
    2c8c:	24 81       	ldd	r18, Z+4	; 0x04
    2c8e:	35 81       	ldd	r19, Z+5	; 0x05
    2c90:	46 81       	ldd	r20, Z+6	; 0x06
    2c92:	57 81       	ldd	r21, Z+7	; 0x07
    2c94:	28 17       	cp	r18, r24
    2c96:	39 07       	cpc	r19, r25
    2c98:	4a 07       	cpc	r20, r26
    2c9a:	5b 07       	cpc	r21, r27
    2c9c:	18 f4       	brcc	.+6      	; 0x2ca4 <__fpcmp_parts_f+0x8e>
    2c9e:	11 23       	and	r17, r17
    2ca0:	41 f0       	breq	.+16     	; 0x2cb2 <__fpcmp_parts_f+0x9c>
    2ca2:	0a c0       	rjmp	.+20     	; 0x2cb8 <__fpcmp_parts_f+0xa2>
    2ca4:	82 17       	cp	r24, r18
    2ca6:	93 07       	cpc	r25, r19
    2ca8:	a4 07       	cpc	r26, r20
    2caa:	b5 07       	cpc	r27, r21
    2cac:	40 f4       	brcc	.+16     	; 0x2cbe <__fpcmp_parts_f+0xa8>
    2cae:	11 23       	and	r17, r17
    2cb0:	19 f0       	breq	.+6      	; 0x2cb8 <__fpcmp_parts_f+0xa2>
    2cb2:	61 e0       	ldi	r22, 0x01	; 1
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <__fpcmp_parts_f+0xac>
    2cb8:	6f ef       	ldi	r22, 0xFF	; 255
    2cba:	7f ef       	ldi	r23, 0xFF	; 255
    2cbc:	02 c0       	rjmp	.+4      	; 0x2cc2 <__fpcmp_parts_f+0xac>
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	1f 91       	pop	r17
    2cc6:	08 95       	ret

00002cc8 <__divmodhi4>:
    2cc8:	97 fb       	bst	r25, 7
    2cca:	09 2e       	mov	r0, r25
    2ccc:	07 26       	eor	r0, r23
    2cce:	0a d0       	rcall	.+20     	; 0x2ce4 <__divmodhi4_neg1>
    2cd0:	77 fd       	sbrc	r23, 7
    2cd2:	04 d0       	rcall	.+8      	; 0x2cdc <__divmodhi4_neg2>
    2cd4:	0c d0       	rcall	.+24     	; 0x2cee <__udivmodhi4>
    2cd6:	06 d0       	rcall	.+12     	; 0x2ce4 <__divmodhi4_neg1>
    2cd8:	00 20       	and	r0, r0
    2cda:	1a f4       	brpl	.+6      	; 0x2ce2 <__divmodhi4_exit>

00002cdc <__divmodhi4_neg2>:
    2cdc:	70 95       	com	r23
    2cde:	61 95       	neg	r22
    2ce0:	7f 4f       	sbci	r23, 0xFF	; 255

00002ce2 <__divmodhi4_exit>:
    2ce2:	08 95       	ret

00002ce4 <__divmodhi4_neg1>:
    2ce4:	f6 f7       	brtc	.-4      	; 0x2ce2 <__divmodhi4_exit>
    2ce6:	90 95       	com	r25
    2ce8:	81 95       	neg	r24
    2cea:	9f 4f       	sbci	r25, 0xFF	; 255
    2cec:	08 95       	ret

00002cee <__udivmodhi4>:
    2cee:	aa 1b       	sub	r26, r26
    2cf0:	bb 1b       	sub	r27, r27
    2cf2:	51 e1       	ldi	r21, 0x11	; 17
    2cf4:	07 c0       	rjmp	.+14     	; 0x2d04 <__udivmodhi4_ep>

00002cf6 <__udivmodhi4_loop>:
    2cf6:	aa 1f       	adc	r26, r26
    2cf8:	bb 1f       	adc	r27, r27
    2cfa:	a6 17       	cp	r26, r22
    2cfc:	b7 07       	cpc	r27, r23
    2cfe:	10 f0       	brcs	.+4      	; 0x2d04 <__udivmodhi4_ep>
    2d00:	a6 1b       	sub	r26, r22
    2d02:	b7 0b       	sbc	r27, r23

00002d04 <__udivmodhi4_ep>:
    2d04:	88 1f       	adc	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	5a 95       	dec	r21
    2d0a:	a9 f7       	brne	.-22     	; 0x2cf6 <__udivmodhi4_loop>
    2d0c:	80 95       	com	r24
    2d0e:	90 95       	com	r25
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	08 95       	ret

00002d16 <__prologue_saves__>:
    2d16:	2f 92       	push	r2
    2d18:	3f 92       	push	r3
    2d1a:	4f 92       	push	r4
    2d1c:	5f 92       	push	r5
    2d1e:	6f 92       	push	r6
    2d20:	7f 92       	push	r7
    2d22:	8f 92       	push	r8
    2d24:	9f 92       	push	r9
    2d26:	af 92       	push	r10
    2d28:	bf 92       	push	r11
    2d2a:	cf 92       	push	r12
    2d2c:	df 92       	push	r13
    2d2e:	ef 92       	push	r14
    2d30:	ff 92       	push	r15
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	ca 1b       	sub	r28, r26
    2d40:	db 0b       	sbc	r29, r27
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	19 94       	eijmp

00002d4e <__epilogue_restores__>:
    2d4e:	2a 88       	ldd	r2, Y+18	; 0x12
    2d50:	39 88       	ldd	r3, Y+17	; 0x11
    2d52:	48 88       	ldd	r4, Y+16	; 0x10
    2d54:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d56:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d58:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d60:	b9 84       	ldd	r11, Y+9	; 0x09
    2d62:	c8 84       	ldd	r12, Y+8	; 0x08
    2d64:	df 80       	ldd	r13, Y+7	; 0x07
    2d66:	ee 80       	ldd	r14, Y+6	; 0x06
    2d68:	fd 80       	ldd	r15, Y+5	; 0x05
    2d6a:	0c 81       	ldd	r16, Y+4	; 0x04
    2d6c:	1b 81       	ldd	r17, Y+3	; 0x03
    2d6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2d70:	b9 81       	ldd	r27, Y+1	; 0x01
    2d72:	ce 0f       	add	r28, r30
    2d74:	d1 1d       	adc	r29, r1
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	ed 01       	movw	r28, r26
    2d82:	08 95       	ret

00002d84 <_exit>:
    2d84:	f8 94       	cli

00002d86 <__stop_program>:
    2d86:	ff cf       	rjmp	.-2      	; 0x2d86 <__stop_program>
